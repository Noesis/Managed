//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;
using System.IO;

namespace Noesis
{

public class FontProvider : BaseComponent {
  internal new static FontProvider CreateProxy(IntPtr cPtr, bool cMemoryOwn) {
    return new FontProvider(cPtr, cMemoryOwn);
  }

  internal FontProvider(IntPtr cPtr, bool cMemoryOwn) : base(cPtr, cMemoryOwn) {
  }

  internal static HandleRef getCPtr(FontProvider obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  protected FontProvider() {
  }

  public struct FontSource {
    public string filename;
    public Stream file;
    public uint faceIndex;
  }

  /// <summary>
  /// Finds the font in the given URI that best matches the specified properties
  /// Returns null stream when there are no matches
  /// </summary>
  public virtual FontSource MatchFont(Uri baseUri, string familyName,
    ref FontWeight weight, ref FontStretch stretch, ref FontStyle style) {
    string baseUri_ = baseUri != null ? baseUri.OriginalString : string.Empty;
    int weight_ = (int)weight, stretch_ = (int)stretch, style_ = (int)style;
    uint index = 0;
    IntPtr filenamePtr = IntPtr.Zero;

    IntPtr filePtr = MatchFontHelper(baseUri_, familyName, ref weight_, ref stretch_, ref style_, ref index, ref filenamePtr);

    string filename = Noesis.Extend.StringFromNativeUtf8(filenamePtr);
    NoesisGUI_PINVOKE.FreeString(filenamePtr);

    weight = (FontWeight)weight_;
    stretch = (FontStretch)stretch_;
    style = (FontStyle)style_;

    return new FontSource {
      filename = filename,
      file = (Stream)Noesis.Extend.GetProxy(filePtr, true),
      faceIndex = index
    };
  }

  /// <summary>
  /// Returns true if the requested font family exists in given URI
  /// </summary>
  public virtual bool FamilyExists(Uri baseUri, string familyName) {
    string baseUri_ = baseUri != null ? baseUri.OriginalString : string.Empty;
    return FamilyExistsHelper(baseUri_, familyName);
  }

  /// <summary>
  /// Scans a folder looking for all font files available. For each file, RegisterFont() should be
  /// called to cache all font information in the base provider implementation.
  /// </summary>
  public virtual void ScanFolder(Uri folder) {
  }

  /// <summary>
  /// Returns a stream to a previously registered font filename.
  /// </summary>
  public virtual Stream OpenFont(Uri folder, string filename) {
    return null;
  }

  /// <summary>
  /// Registers a font family associated to the specified folder.
  /// </summary>
  protected void RegisterFont(Uri folder, string filename) {
    RegisterFontHelper(folder.OriginalString, filename);
  }

  /// <summary>
  /// Notifies of changes to the specified texture file
  /// </summary>
  public delegate void FontChangedHandler(Uri baseUri, string familyName, FontWeight weight,
    FontStretch stretch, FontStyle style);
  public event FontChangedHandler FontChanged;

  /// <summary>
  /// Raises XamlChanged event notifying Noesis that it should reload the specified xaml
  /// </summary>
  public void RaiseFontChanged(Uri baseUri, string familyName, FontWeight weight,
    FontStretch stretch, FontStyle style) {
    FontChanged?.Invoke(baseUri, familyName, weight, stretch, style);
    Noesis_RaiseFontChanged(swigCPtr, baseUri.OriginalString, familyName, (int)weight, (int)stretch, (int)style);
  }

  [DllImport(Library.Name)]
  private static extern void Noesis_RaiseFontChanged(HandleRef provider,
    [MarshalAs(UnmanagedType.LPWStr)]string baseUri,
    [MarshalAs(UnmanagedType.LPWStr)]string familyName,
    int weight, int stretch, int style);

  private void RegisterFontHelper(string folder, string id) {
    NoesisGUI_PINVOKE.FontProvider_RegisterFontHelper(swigCPtr, folder != null ? folder : string.Empty, id != null ? id : string.Empty);
  }

  private IntPtr MatchFontHelper(string baseUri, string familyName, ref int weight, ref int stretch, ref int style, ref uint index, ref IntPtr filename) {
    IntPtr ret = NoesisGUI_PINVOKE.FontProvider_MatchFontHelper(swigCPtr, baseUri != null ? baseUri : string.Empty, familyName != null ? familyName : string.Empty, ref weight, ref stretch, ref style, ref index, ref filename);
    return ret;
  }

  private bool FamilyExistsHelper(string baseUri, string familyName) {
    bool ret = NoesisGUI_PINVOKE.FontProvider_FamilyExistsHelper(swigCPtr, baseUri != null ? baseUri : string.Empty, familyName != null ? familyName : string.Empty);
    return ret;
  }

  internal new static IntPtr Extend(string typeName) {
    return NoesisGUI_PINVOKE.Extend_FontProvider(Marshal.StringToHGlobalAnsi(typeName));
  }
}

}

