//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

[System.Security.SuppressUnmanagedCodeSecurity]
internal class NoesisGUI_PINVOKE {

  [DllImport(Library.Name)]
  public static extern void FreeString(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr BaseComponent_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr BaseComponent_GetDynamicType(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_BaseComponent(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ExtendCommand(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ExtendConverter(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ExtendMultiConverter(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ExtendList(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ExtendObservableList(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ExtendDictionary(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ExtendListIndexer(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ExtendDictionaryIndexer(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ExtendStream(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ExtendScrollInfo(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ExtendVirtualScrollInfo(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_XamlProvider(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_TextureProvider(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_FileTextureProvider(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_FontProvider(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_DependencyObject(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_DispatcherObject(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Freezable(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Adorner(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Animatable(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ButtonBase(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_BaseFreezableCollection(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_MenuBase(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_TextBoxBase(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_BaseUICollection(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Binding(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Border(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_BrushShader(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_BulletDecorator(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Button(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Canvas(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_CheckBox(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ComboBox(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ComboBoxItem(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ContentControl(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ContextMenu(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Control(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_CroppedBitmap(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_DataTemplateSelector(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Decorator(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_DockPanel(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Expander(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_FrameworkElement(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Grid(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_GroupBox(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_HeaderedContentControl(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_HeaderedItemsControl(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Image(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ItemsControl(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Label(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ListBox(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ListBoxItem(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_MarkupExtension(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Menu(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_MenuItem(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_MultiBinding(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Page(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Panel(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_PasswordBox(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Popup(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ProgressBar(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_RadioButton(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_RangeBase(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_RepeatButton(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ResourceDictionary(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ScrollBar(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ScrollViewer(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Selector(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Separator(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ShaderEffect(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Shape(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Slider(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_StackPanel(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_StatusBar(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_StatusBarItem(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_TabControl(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_TabItem(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_TabPanel(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_TextBlock(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_TextBox(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_TextureSource(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Thumb(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_TickBar(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ToggleButton(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ToolBar(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ToolBarOverflowPanel(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ToolBarPanel(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ToolBarTray(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ToolTip(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Track(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_TreeView(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_TreeViewItem(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_UIElement(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_UserControl(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Viewbox(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Visual(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_WrapPanel(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_AnimationTimeline(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_BooleanAnimationBase(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ColorAnimation(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ColorAnimationBase(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_DoubleAnimation(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_DoubleAnimationBase(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Int16Animation(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Int16AnimationBase(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Int32Animation(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Int32AnimationBase(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Int64Animation(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Int64AnimationBase(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_MatrixAnimationBase(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ObjectAnimationBase(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_PointAnimation(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_PointAnimationBase(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_RectAnimation(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_RectAnimationBase(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_SizeAnimation(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_SizeAnimationBase(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_StringAnimationBase(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ThicknessAnimation(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ThicknessAnimationBase(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_GridView(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_GridViewColumn(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_GridViewColumnHeader(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ListView(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ListViewItem(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern void BindEvent_CommandBinding_PreviewCanExecute(CommandBinding.RaisePreviewCanExecuteCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_CommandBinding_PreviewCanExecute(CommandBinding.RaisePreviewCanExecuteCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_CommandBinding_CanExecute(CommandBinding.RaiseCanExecuteCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_CommandBinding_CanExecute(CommandBinding.RaiseCanExecuteCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_CommandBinding_PreviewExecuted(CommandBinding.RaisePreviewExecutedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_CommandBinding_PreviewExecuted(CommandBinding.RaisePreviewExecutedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_CommandBinding_Executed(CommandBinding.RaiseExecutedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_CommandBinding_Executed(CommandBinding.RaiseExecutedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_ItemContainerGenerator_StatusChanged(ItemContainerGenerator.RaiseStatusChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_ItemContainerGenerator_StatusChanged(ItemContainerGenerator.RaiseStatusChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_ItemContainerGenerator_ItemsChanged(ItemContainerGenerator.RaiseItemsChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_ItemContainerGenerator_ItemsChanged(ItemContainerGenerator.RaiseItemsChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_Popup_Closed(Popup.RaiseClosedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_Popup_Closed(Popup.RaiseClosedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_Popup_Opened(Popup.RaiseOpenedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_Popup_Opened(Popup.RaiseOpenedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_Clock_Completed(Clock.RaiseCompletedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_Clock_Completed(Clock.RaiseCompletedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_Timeline_Completed(Timeline.RaiseCompletedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_Timeline_Completed(Timeline.RaiseCompletedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_VisualStateGroup_CurrentStateChanging(VisualStateGroup.RaiseCurrentStateChangingCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_VisualStateGroup_CurrentStateChanging(VisualStateGroup.RaiseCurrentStateChangingCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_VisualStateGroup_CurrentStateChanged(VisualStateGroup.RaiseCurrentStateChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_VisualStateGroup_CurrentStateChanged(VisualStateGroup.RaiseCurrentStateChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern IntPtr BaseComponent_GetBaseType(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern void BaseComponent_AddReference(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern void BaseComponent_Release(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern int BaseComponent_GetNumReferences(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Bool_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Float_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Double_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Int_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr UInt_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Short_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr UShort_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Long_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr ULong_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr String_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Type_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_Bool_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_Float_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_Double_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_Int_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_UInt_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_Short_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_UShort_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_Long_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_ULong_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_String_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_Type_GetStaticType();

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Unbox_Bool(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern float Unbox_Float(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern double Unbox_Double(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_Int(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern uint Unbox_UInt(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern short Unbox_Short(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern ushort Unbox_UShort(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern long Unbox_Long(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern ulong Unbox_ULong(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Unbox_String(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Unbox_Type(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Bool(bool jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Float(float jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Double(double jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Int(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_UInt(uint jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Short(short jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_UShort(ushort jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Long(long jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_ULong(ulong jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_String([MarshalAs(UnmanagedType.LPWStr)]string jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Type(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Size_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_Size_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Unbox_Size(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Size(ref Size jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Size_TryParse([MarshalAs(UnmanagedType.LPWStr)]string jarg1, out Size jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Point_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_Point_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Unbox_Point(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Point(ref Point jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Point_TryParse([MarshalAs(UnmanagedType.LPWStr)]string jarg1, out Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Rect_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_Rect_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Unbox_Rect(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Rect(ref Rect jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Rect_TryParse([MarshalAs(UnmanagedType.LPWStr)]string jarg1, out Rect jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Int32Rect_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_Int32Rect_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Unbox_Int32Rect(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Int32Rect(ref Int32Rect jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Int32Rect_TryParse([MarshalAs(UnmanagedType.LPWStr)]string jarg1, out Int32Rect jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Thickness_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_Thickness_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Unbox_Thickness(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Thickness(ref Thickness jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Thickness_TryParse([MarshalAs(UnmanagedType.LPWStr)]string jarg1, out Thickness jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr CornerRadius_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_CornerRadius_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Unbox_CornerRadius(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_CornerRadius(ref CornerRadius jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool CornerRadius_TryParse([MarshalAs(UnmanagedType.LPWStr)]string jarg1, out CornerRadius jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Color_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_Color_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Unbox_Color(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Color(ref Color jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Color_TryParse([MarshalAs(UnmanagedType.LPWStr)]string jarg1, out Color jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Matrix_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_Matrix_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Unbox_Matrix(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Matrix(ref Matrix jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Vector4_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_Vector4_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Unbox_Vector4(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Vector4(ref Vector4 jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Matrix4_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_Matrix4_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Unbox_Matrix4(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Matrix4(ref Matrix4 jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Matrix3D_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_Matrix3D_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Unbox_Matrix3D(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Matrix3D(ref Matrix3D jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr NullableBool_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr NullableInt16_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr NullableUInt16_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr NullableInt32_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr NullableUInt32_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr NullableInt64_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr NullableUInt64_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr NullableFloat_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr NullableDouble_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr NullableColor_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr NullablePoint_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr NullableRect_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr NullableInt32Rect_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr NullableSize_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr NullableThickness_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr NullableCornerRadius_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr NullableTimeSpan_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr NullableDuration_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr NullableKeyTime_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr DependencyProperty_GetUnsetValue();

  [DllImport(Library.Name)]
  public static extern IntPtr DependencyProperty_Name_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool DependencyProperty_ReadOnly_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr DependencyProperty_GetOwnerTypeHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr DependencyProperty_GetPropertyTypeHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr DependencyProperty_GetMetadataHelper(HandleRef jarg1, IntPtr jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool DispatcherObject_CheckAccess(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void DispatcherObject_VerifyAccess(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int DispatcherObject_ThreadId_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr DependencyPropertyChangedEventArgs_GetNewValueHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr DependencyPropertyChangedEventArgs_GetOldValueHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr DependencyPropertyChangedEventArgs_GetPropertyHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void delete_DependencyPropertyChangedEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void DependencyObject_ClearAnimation(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool DependencyObject_IsSealed_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void DependencyObject_SetCurrentValueHelper(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr DependencyObject_ReadLocalValueHelper(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void DependencyObject_CoerceValueHelper(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void DependencyObject_InvalidatePropertyHelper(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void DependencyObject_ClearValueHelper(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void DependencyObject_InitObject(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Freezable_Freeze(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Freezable_CanSeal(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Freezable_IsSealed(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Freezable_Seal(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Freezable_CanFreeze_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Freezable_IsFrozen_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Freezable_CloneHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Freezable_CloneCurrentValueHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Freezable_GetAsFrozenHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Freezable_GetCurrentValueAsFrozenHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Expression();

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool PropertyMetadata_HasDefaultValue_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PropertyMetadata_GetDefaultValueHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void PropertyMetadata_SetDefaultValueHelper(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern int Unbox_UpdateSourceTrigger(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_UpdateSourceTrigger(int jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkPropertyMetadata_AffectsMeasure_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool FrameworkPropertyMetadata_AffectsMeasure_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkPropertyMetadata_AffectsArrange_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool FrameworkPropertyMetadata_AffectsArrange_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkPropertyMetadata_AffectsParentMeasure_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool FrameworkPropertyMetadata_AffectsParentMeasure_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkPropertyMetadata_AffectsParentArrange_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool FrameworkPropertyMetadata_AffectsParentArrange_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkPropertyMetadata_AffectsRender_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool FrameworkPropertyMetadata_AffectsRender_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkPropertyMetadata_Inherits_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool FrameworkPropertyMetadata_Inherits_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkPropertyMetadata_OverridesInheritanceBehavior_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool FrameworkPropertyMetadata_OverridesInheritanceBehavior_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkPropertyMetadata_IsNotDataBindable_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool FrameworkPropertyMetadata_IsNotDataBindable_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkPropertyMetadata_BindsTwoWayByDefault_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool FrameworkPropertyMetadata_BindsTwoWayByDefault_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkPropertyMetadata_Journal_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool FrameworkPropertyMetadata_Journal_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkPropertyMetadata_SubPropertiesDoNotAffectRender_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool FrameworkPropertyMetadata_SubPropertiesDoNotAffectRender_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkPropertyMetadata_DefaultUpdateSourceTrigger_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int FrameworkPropertyMetadata_DefaultUpdateSourceTrigger_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_AlignmentX(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_AlignmentX(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_AlignmentY(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_AlignmentY(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_AutoToolTipPlacement(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_AutoToolTipPlacement(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_BindingMode(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_BindingMode(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_BitmapScalingMode(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_BitmapScalingMode(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_BrushMappingMode(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_BrushMappingMode(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_CharacterCasing(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_CharacterCasing(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_ClickMode(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_ClickMode(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_ColorInterpolationMode(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_ColorInterpolationMode(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_Dock(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Dock(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_ExpandDirection(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_ExpandDirection(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_FillRule(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_FillRule(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_FlowDirection(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_FlowDirection(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_FontStretch(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_FontStretch(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_FontStyle(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_FontStyle(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_FontWeight(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_FontWeight(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_GeometryCombineMode(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_GeometryCombineMode(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_GradientSpreadMethod(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_GradientSpreadMethod(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_HorizontalAlignment(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_HorizontalAlignment(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_InputScope(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_InputScope(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_MouseAction(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_MouseAction(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_Key(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Key(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_ModifierKeys(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_ModifierKeys(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_KeyboardNavigationMode(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_KeyboardNavigationMode(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_LineStackingStrategy(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_LineStackingStrategy(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_ListSortDirection(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_ListSortDirection(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_MenuItemRole(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_MenuItemRole(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_Orientation(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Orientation(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_OverflowMode(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_OverflowMode(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_PenLineCap(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_PenLineCap(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_PenLineJoin(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_PenLineJoin(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_PlacementMode(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_PlacementMode(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_PopupAnimation(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_PopupAnimation(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_RelativeSourceMode(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_RelativeSourceMode(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_SelectionMode(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_SelectionMode(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_ScrollBarVisibility(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_ScrollBarVisibility(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_Stretch(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Stretch(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_StretchDirection(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_StretchDirection(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_TextDecorations(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_TextDecorations(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_TextAlignment(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_TextAlignment(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_TextTrimming(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_TextTrimming(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_TextWrapping(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_TextWrapping(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_TickBarPlacement(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_TickBarPlacement(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_TickPlacement(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_TickPlacement(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_TileMode(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_TileMode(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_VerticalAlignment(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_VerticalAlignment(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_Visibility(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Visibility(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_DragDropEffects(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_DragDropEffects(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_DragDropKeyStates(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_DragDropKeyStates(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_DragAction(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_DragAction(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_CustomEnum(IntPtr jarg1, ulong jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Unbox_CustomEnum(IntPtr jarg1, ref ulong jarg2);

  [DllImport(Library.Name)]
  public static extern void FontProvider_RegisterFontHelper(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2, [MarshalAs(UnmanagedType.LPWStr)]string jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr FontProvider_MatchFontHelper(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2, [MarshalAs(UnmanagedType.LPWStr)]string jarg3, ref int jarg4, ref int jarg5, ref int jarg6, ref uint jarg7, ref IntPtr jarg8);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool FontProvider_FamilyExistsHelper(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2, [MarshalAs(UnmanagedType.LPWStr)]string jarg3);

  [DllImport(Library.Name)]
  public static extern int BaseUICollection_Count_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int BaseUICollection_Add(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void BaseUICollection_Insert(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool BaseUICollection_Contains(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern int BaseUICollection_IndexOf(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool BaseUICollection_Remove(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void BaseUICollection_RemoveAt(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern void BaseUICollection_Clear(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void BaseUICollection_Set(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr BaseUICollection_Get(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern void BaseFreezableCollection_Set(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern int BaseFreezableCollection_Add(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void BaseFreezableCollection_Insert(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern int BaseFreezableCollection_IndexOf(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void BaseFreezableCollection_RemoveAt(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern void BaseFreezableCollection_Clear(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int BaseFreezableCollection_Count_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool BaseFreezableCollection_Contains(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool BaseFreezableCollection_Remove(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr BaseFreezableCollection_Get(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Cursor([MarshalAs(UnmanagedType.LPWStr)]string jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Cursor_ToString(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int Cursor_Type_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Cursor_Filename_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Cursors_None_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Cursors_No_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Cursors_Arrow_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Cursors_AppStarting_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Cursors_Cross_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Cursors_Help_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Cursors_IBeam_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Cursors_SizeAll_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Cursors_SizeNESW_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Cursors_SizeNS_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Cursors_SizeNWSE_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Cursors_SizeWE_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Cursors_UpArrow_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Cursors_Wait_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Cursors_Hand_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Cursors_Pen_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Cursors_ScrollNS_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Cursors_ScrollWE_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Cursors_ScrollAll_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Cursors_ScrollN_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Cursors_ScrollS_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Cursors_ScrollW_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Cursors_ScrollE_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Cursors_ScrollNW_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Cursors_ScrollNE_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Cursors_ScrollSW_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Cursors_ScrollSE_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Cursors_ArrowCD_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Uri_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_Uri_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Unbox_Uri(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Uri([MarshalAs(UnmanagedType.LPWStr)]string jarg1);

  [DllImport(Library.Name)]
  public static extern float ImageSource_Width_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ImageSource_Height_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int BitmapSource_GetFormat(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float BitmapSource_DpiX_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float BitmapSource_DpiY_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int BitmapSource_PixelWidth_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int BitmapSource_PixelHeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr BitmapSource_CreateHelper(int jarg1, int jarg2, float jarg3, float jarg4, byte[] jarg5, int jarg6, uint jarg7);

  [DllImport(Library.Name)]
  public static extern void BitmapSource_CopyPixelsHelper(HandleRef jarg1, byte[] jarg2, uint jarg3, int jarg4, int jarg5);

  [DllImport(Library.Name)]
  public static extern IntPtr new_BitmapImage();

  [DllImport(Library.Name)]
  public static extern IntPtr BitmapImage_UriSourceProperty_get();

  [DllImport(Library.Name)]
  public static extern void BitmapImage_UriSource_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr BitmapImage_UriSource_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_CroppedBitmap__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_CroppedBitmap__SWIG_1(HandleRef jarg1, ref Int32Rect jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr CroppedBitmap_SourceProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr CroppedBitmap_SourceRectProperty_get();

  [DllImport(Library.Name)]
  public static extern void CroppedBitmap_Source_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr CroppedBitmap_Source_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void CroppedBitmap_SourceRect_set(HandleRef jarg1, ref Int32Rect jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr CroppedBitmap_SourceRect_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_TextureSource__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_TextureSource__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextureSource_Texture_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TextureSource_Texture_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void DynamicTextureSource_Resize(HandleRef jarg1, uint jarg2, uint jarg3);

  [DllImport(Library.Name)]
  public static extern int DynamicTextureSource_PixelWidth_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int DynamicTextureSource_PixelHeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Transform_Identity_get();

  [DllImport(Library.Name)]
  public static extern void Transform_GetTransformHelper(HandleRef jarg1, out Matrix jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Transform_ParseHelper([MarshalAs(UnmanagedType.LPWStr)]string jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_TransformCollection();

  [DllImport(Library.Name)]
  public static extern IntPtr new_TranslateTransform__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_TranslateTransform__SWIG_1(float jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TranslateTransform_XProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TranslateTransform_YProperty_get();

  [DllImport(Library.Name)]
  public static extern void TranslateTransform_X_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float TranslateTransform_X_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TranslateTransform_Y_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float TranslateTransform_Y_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ScaleTransform__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ScaleTransform__SWIG_1(float jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ScaleTransform_CenterXProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ScaleTransform_CenterYProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ScaleTransform_ScaleXProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ScaleTransform_ScaleYProperty_get();

  [DllImport(Library.Name)]
  public static extern void ScaleTransform_ScaleX_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float ScaleTransform_ScaleX_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScaleTransform_ScaleY_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float ScaleTransform_ScaleY_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScaleTransform_CenterX_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float ScaleTransform_CenterX_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScaleTransform_CenterY_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float ScaleTransform_CenterY_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_SkewTransform__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_SkewTransform__SWIG_1(float jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr SkewTransform_AngleXProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr SkewTransform_AngleYProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr SkewTransform_CenterXProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr SkewTransform_CenterYProperty_get();

  [DllImport(Library.Name)]
  public static extern void SkewTransform_AngleX_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float SkewTransform_AngleX_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void SkewTransform_AngleY_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float SkewTransform_AngleY_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void SkewTransform_CenterX_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float SkewTransform_CenterX_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void SkewTransform_CenterY_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float SkewTransform_CenterY_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_RotateTransform__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_RotateTransform__SWIG_1(float jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RotateTransform_AngleProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr RotateTransform_CenterXProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr RotateTransform_CenterYProperty_get();

  [DllImport(Library.Name)]
  public static extern void RotateTransform_Angle_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float RotateTransform_Angle_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RotateTransform_CenterX_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float RotateTransform_CenterX_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RotateTransform_CenterY_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float RotateTransform_CenterY_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_CompositeTransform();

  [DllImport(Library.Name)]
  public static extern IntPtr CompositeTransform_CenterXProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr CompositeTransform_CenterYProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr CompositeTransform_RotationProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr CompositeTransform_ScaleXProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr CompositeTransform_ScaleYProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr CompositeTransform_SkewXProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr CompositeTransform_SkewYProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr CompositeTransform_TranslateXProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr CompositeTransform_TranslateYProperty_get();

  [DllImport(Library.Name)]
  public static extern void CompositeTransform_CenterX_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float CompositeTransform_CenterX_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void CompositeTransform_CenterY_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float CompositeTransform_CenterY_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void CompositeTransform_Rotation_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float CompositeTransform_Rotation_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void CompositeTransform_ScaleX_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float CompositeTransform_ScaleX_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void CompositeTransform_ScaleY_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float CompositeTransform_ScaleY_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void CompositeTransform_SkewX_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float CompositeTransform_SkewX_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void CompositeTransform_SkewY_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float CompositeTransform_SkewY_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void CompositeTransform_TranslateX_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float CompositeTransform_TranslateX_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void CompositeTransform_TranslateY_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float CompositeTransform_TranslateY_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_MatrixTransform__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_MatrixTransform__SWIG_1(ref Matrix jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr MatrixTransform_MatrixProperty_get();

  [DllImport(Library.Name)]
  public static extern void MatrixTransform_Matrix_set(HandleRef jarg1, ref Matrix jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr MatrixTransform_Matrix_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_TransformGroup();

  [DllImport(Library.Name)]
  public static extern IntPtr TransformGroup_ChildrenProperty_get();

  [DllImport(Library.Name)]
  public static extern void TransformGroup_Children_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TransformGroup_Children_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Brush_OpacityProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brush_RelativeTransformProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brush_TransformProperty_get();

  [DllImport(Library.Name)]
  public static extern void Brush_Opacity_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Brush_Opacity_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Brush_RelativeTransform_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Brush_RelativeTransform_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Brush_Transform_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Brush_Transform_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Brush_ParseHelper([MarshalAs(UnmanagedType.LPWStr)]string jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_AliceBlue_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_AntiqueWhite_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Aqua_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Aquamarine_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Azure_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Beige_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Bisque_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Black_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_BlanchedAlmond_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Blue_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_BlueViolet_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Brown_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_BurlyWood_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_CadetBlue_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Chartreuse_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Chocolate_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Coral_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_CornflowerBlue_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Cornsilk_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Crimson_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Cyan_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_DarkBlue_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_DarkCyan_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_DarkGoldenrod_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_DarkGray_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_DarkGreen_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_DarkKhaki_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_DarkMagenta_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_DarkOliveGreen_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_DarkOrange_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_DarkOrchid_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_DarkRed_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_DarkSalmon_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_DarkSeaGreen_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_DarkSlateBlue_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_DarkSlateGray_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_DarkTurquoise_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_DarkViolet_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_DeepPink_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_DeepSkyBlue_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_DimGray_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_DodgerBlue_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Firebrick_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_FloralWhite_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_ForestGreen_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Fuchsia_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Gainsboro_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_GhostWhite_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Gold_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Goldenrod_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Gray_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Green_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_GreenYellow_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Honeydew_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_HotPink_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_IndianRed_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Indigo_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Ivory_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Khaki_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Lavender_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_LavenderBlush_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_LawnGreen_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_LemonChiffon_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_LightBlue_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_LightCoral_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_LightCyan_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_LightGoldenrodYellow_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_LightGray_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_LightGreen_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_LightPink_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_LightSalmon_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_LightSeaGreen_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_LightSkyBlue_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_LightSlateGray_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_LightSteelBlue_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_LightYellow_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Lime_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_LimeGreen_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Linen_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Magenta_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Maroon_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_MediumAquamarine_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_MediumBlue_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_MediumOrchid_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_MediumPurple_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_MediumSeaGreen_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_MediumSlateBlue_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_MediumSpringGreen_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_MediumTurquoise_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_MediumVioletRed_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_MidnightBlue_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_MintCream_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_MistyRose_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Moccasin_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_NavajoWhite_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Navy_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_OldLace_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Olive_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_OliveDrab_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Orange_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_OrangeRed_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Orchid_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_PaleGoldenrod_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_PaleGreen_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_PaleTurquoise_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_PaleVioletRed_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_PapayaWhip_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_PeachPuff_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Peru_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Pink_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Plum_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_PowderBlue_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Purple_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Red_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_RosyBrown_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_RoyalBlue_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_SaddleBrown_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Salmon_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_SandyBrown_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_SeaGreen_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_SeaShell_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Sienna_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Silver_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_SkyBlue_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_SlateBlue_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_SlateGray_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Snow_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_SpringGreen_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_SteelBlue_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Tan_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Teal_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Thistle_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Tomato_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Transparent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Turquoise_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Violet_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Wheat_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_White_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_WhiteSmoke_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Yellow_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_YellowGreen_get();

  [DllImport(Library.Name)]
  public static extern IntPtr new_SolidColorBrush__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_SolidColorBrush__SWIG_1(ref Color jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr SolidColorBrush_ToString(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr SolidColorBrush_ColorProperty_get();

  [DllImport(Library.Name)]
  public static extern void SolidColorBrush_Color_set(HandleRef jarg1, ref Color jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr SolidColorBrush_Color_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_GradientStop();

  [DllImport(Library.Name)]
  public static extern IntPtr GradientStop_ToString(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GradientStop_ColorProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr GradientStop_OffsetProperty_get();

  [DllImport(Library.Name)]
  public static extern void GradientStop_Color_set(HandleRef jarg1, ref Color jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GradientStop_Color_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GradientStop_Offset_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float GradientStop_Offset_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_GradientStopCollection();

  [DllImport(Library.Name)]
  public static extern IntPtr GradientBrush_ColorInterpolationModeProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr GradientBrush_GradientStopsProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr GradientBrush_MappingModeProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr GradientBrush_SpreadMethodProperty_get();

  [DllImport(Library.Name)]
  public static extern void GradientBrush_ColorInterpolationMode_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int GradientBrush_ColorInterpolationMode_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GradientBrush_GradientStops_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GradientBrush_GradientStops_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GradientBrush_MappingMode_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int GradientBrush_MappingMode_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GradientBrush_SpreadMethod_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int GradientBrush_SpreadMethod_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_LinearGradientBrush();

  [DllImport(Library.Name)]
  public static extern IntPtr LinearGradientBrush_EndPointProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr LinearGradientBrush_StartPointProperty_get();

  [DllImport(Library.Name)]
  public static extern void LinearGradientBrush_StartPoint_set(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr LinearGradientBrush_StartPoint_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void LinearGradientBrush_EndPoint_set(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr LinearGradientBrush_EndPoint_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_RadialGradientBrush();

  [DllImport(Library.Name)]
  public static extern IntPtr RadialGradientBrush_CenterProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr RadialGradientBrush_GradientOriginProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr RadialGradientBrush_RadiusXProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr RadialGradientBrush_RadiusYProperty_get();

  [DllImport(Library.Name)]
  public static extern void RadialGradientBrush_Center_set(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr RadialGradientBrush_Center_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RadialGradientBrush_GradientOrigin_set(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr RadialGradientBrush_GradientOrigin_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RadialGradientBrush_RadiusX_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float RadialGradientBrush_RadiusX_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RadialGradientBrush_RadiusY_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float RadialGradientBrush_RadiusY_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TileBrush_AlignmentXProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TileBrush_AlignmentYProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TileBrush_StretchProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TileBrush_TileModeProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TileBrush_ViewboxProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TileBrush_ViewboxUnitsProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TileBrush_ViewportProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TileBrush_ViewportUnitsProperty_get();

  [DllImport(Library.Name)]
  public static extern void TileBrush_AlignmentX_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TileBrush_AlignmentX_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TileBrush_AlignmentY_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TileBrush_AlignmentY_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TileBrush_Stretch_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TileBrush_Stretch_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TileBrush_TileMode_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TileBrush_TileMode_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TileBrush_Viewbox_set(HandleRef jarg1, ref Rect jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TileBrush_Viewbox_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TileBrush_ViewboxUnits_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TileBrush_ViewboxUnits_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TileBrush_Viewport_set(HandleRef jarg1, ref Rect jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TileBrush_Viewport_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TileBrush_ViewportUnits_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TileBrush_ViewportUnits_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ImageBrush__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ImageBrush__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ImageBrush_ImageSourceProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ImageBrush_ShaderProperty_get();

  [DllImport(Library.Name)]
  public static extern void ImageBrush_ImageSource_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ImageBrush_ImageSource_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ImageBrush_Shader_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ImageBrush_Shader_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void BrushShader_SetPixelShader(HandleRef jarg1, IntPtr jarg2, int jarg3);

  [DllImport(Library.Name)]
  public static extern void BrushShader_SetTexture(HandleRef jarg1, HandleRef jarg2, uint jarg3);

  [DllImport(Library.Name)]
  public static extern void BrushShader_SetConstantBuffer(HandleRef jarg1, IntPtr jarg2, uint jarg3);

  [DllImport(Library.Name)]
  public static extern void BrushShader_InvalidateConstantBuffer(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Pen();

  [DllImport(Library.Name)]
  public static extern IntPtr Pen_BrushProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Pen_DashCapProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Pen_DashStyleProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Pen_EndLineCapProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Pen_LineJoinProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Pen_MiterLimitProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Pen_StartLineCapProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Pen_ThicknessProperty_get();

  [DllImport(Library.Name)]
  public static extern void Pen_Brush_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Pen_Brush_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Pen_DashCap_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Pen_DashCap_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Pen_DashStyle_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Pen_DashStyle_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Pen_EndLineCap_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Pen_EndLineCap_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Pen_LineJoin_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Pen_LineJoin_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Pen_MiterLimit_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Pen_MiterLimit_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Pen_StartLineCap_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Pen_StartLineCap_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Pen_Thickness_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Pen_Thickness_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Transform3D_GetTransformHelper(HandleRef jarg1, out Matrix3D jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_CompositeTransform3D();

  [DllImport(Library.Name)]
  public static extern IntPtr CompositeTransform3D_ConstructTransform3DMatrix(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, float jarg10, float jarg11, float jarg12);

  [DllImport(Library.Name)]
  public static extern IntPtr CompositeTransform3D_CenterXProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr CompositeTransform3D_CenterYProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr CompositeTransform3D_CenterZProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr CompositeTransform3D_RotationXProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr CompositeTransform3D_RotationYProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr CompositeTransform3D_RotationZProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr CompositeTransform3D_ScaleXProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr CompositeTransform3D_ScaleYProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr CompositeTransform3D_ScaleZProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr CompositeTransform3D_TranslateXProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr CompositeTransform3D_TranslateYProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr CompositeTransform3D_TranslateZProperty_get();

  [DllImport(Library.Name)]
  public static extern void CompositeTransform3D_CenterX_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float CompositeTransform3D_CenterX_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void CompositeTransform3D_CenterY_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float CompositeTransform3D_CenterY_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void CompositeTransform3D_CenterZ_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float CompositeTransform3D_CenterZ_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void CompositeTransform3D_RotationX_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float CompositeTransform3D_RotationX_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void CompositeTransform3D_RotationY_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float CompositeTransform3D_RotationY_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void CompositeTransform3D_RotationZ_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float CompositeTransform3D_RotationZ_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void CompositeTransform3D_ScaleX_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float CompositeTransform3D_ScaleX_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void CompositeTransform3D_ScaleY_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float CompositeTransform3D_ScaleY_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void CompositeTransform3D_ScaleZ_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float CompositeTransform3D_ScaleZ_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void CompositeTransform3D_TranslateX_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float CompositeTransform3D_TranslateX_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void CompositeTransform3D_TranslateY_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float CompositeTransform3D_TranslateY_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void CompositeTransform3D_TranslateZ_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float CompositeTransform3D_TranslateZ_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_MatrixTransform3D__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_MatrixTransform3D__SWIG_1(ref Matrix3D jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr MatrixTransform3D_MatrixProperty_get();

  [DllImport(Library.Name)]
  public static extern void MatrixTransform3D_Matrix_set(HandleRef jarg1, ref Matrix3D jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr MatrixTransform3D_Matrix_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_BlurEffect();

  [DllImport(Library.Name)]
  public static extern IntPtr BlurEffect_RadiusProperty_get();

  [DllImport(Library.Name)]
  public static extern void BlurEffect_Radius_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float BlurEffect_Radius_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_DropShadowEffect();

  [DllImport(Library.Name)]
  public static extern IntPtr DropShadowEffect_BlurRadiusProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr DropShadowEffect_ColorProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr DropShadowEffect_DirectionProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr DropShadowEffect_OpacityProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr DropShadowEffect_ShadowDepthProperty_get();

  [DllImport(Library.Name)]
  public static extern void DropShadowEffect_BlurRadius_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float DropShadowEffect_BlurRadius_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void DropShadowEffect_Color_set(HandleRef jarg1, ref Color jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr DropShadowEffect_Color_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void DropShadowEffect_Direction_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float DropShadowEffect_Direction_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void DropShadowEffect_Opacity_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float DropShadowEffect_Opacity_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void DropShadowEffect_ShadowDepth_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float DropShadowEffect_ShadowDepth_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ShaderEffect_SetPadding(HandleRef jarg1, float jarg2, float jarg3, float jarg4, float jarg5);

  [DllImport(Library.Name)]
  public static extern void ShaderEffect_SetPixelShader(HandleRef jarg1, IntPtr jarg2);

  [DllImport(Library.Name)]
  public static extern void ShaderEffect_SetConstantBuffer(HandleRef jarg1, IntPtr jarg2, uint jarg3);

  [DllImport(Library.Name)]
  public static extern void ShaderEffect_InvalidateConstantBuffer(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Geometry_IsEmpty(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Geometry_GetRenderBounds(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Geometry_FillContains(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Geometry_StrokeContains(HandleRef jarg1, HandleRef jarg2, ref Point jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr Geometry_TransformProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Geometry_TrimStartProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Geometry_TrimEndProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Geometry_TrimOffsetProperty_get();

  [DllImport(Library.Name)]
  public static extern void Geometry_Transform_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Geometry_Transform_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Geometry_TrimStart_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Geometry_TrimStart_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Geometry_TrimEnd_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Geometry_TrimEnd_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Geometry_TrimOffset_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Geometry_TrimOffset_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Geometry_GetBoundsHelper(HandleRef jarg1, out Rect jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Geometry_ParseHelper([MarshalAs(UnmanagedType.LPWStr)]string jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_GeometryCollection();

  [DllImport(Library.Name)]
  public static extern IntPtr new_RectangleGeometry__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_RectangleGeometry__SWIG_1(ref Rect jarg1, float jarg2, float jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr new_RectangleGeometry__SWIG_2(ref Rect jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_RectangleGeometry__SWIG_3(ref Rect jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool RectangleGeometry_IsEmpty(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RectangleGeometry_RadiusXProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr RectangleGeometry_RadiusYProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr RectangleGeometry_RectProperty_get();

  [DllImport(Library.Name)]
  public static extern void RectangleGeometry_RadiusX_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float RectangleGeometry_RadiusX_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RectangleGeometry_RadiusY_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float RectangleGeometry_RadiusY_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RectangleGeometry_Rect_set(HandleRef jarg1, ref Rect jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr RectangleGeometry_Rect_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_EllipseGeometry__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_EllipseGeometry__SWIG_1(ref Point jarg1, float jarg2, float jarg3);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool EllipseGeometry_IsEmpty(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr EllipseGeometry_CenterProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr EllipseGeometry_RadiusXProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr EllipseGeometry_RadiusYProperty_get();

  [DllImport(Library.Name)]
  public static extern void EllipseGeometry_Center_set(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr EllipseGeometry_Center_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void EllipseGeometry_RadiusX_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float EllipseGeometry_RadiusX_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void EllipseGeometry_RadiusY_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float EllipseGeometry_RadiusY_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_LineGeometry__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_LineGeometry__SWIG_1(ref Point jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool LineGeometry_IsEmpty(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr LineGeometry_EndPointProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr LineGeometry_StartPointProperty_get();

  [DllImport(Library.Name)]
  public static extern void LineGeometry_StartPoint_set(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr LineGeometry_StartPoint_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void LineGeometry_EndPoint_set(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr LineGeometry_EndPoint_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_CombinedGeometry__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_CombinedGeometry__SWIG_1(HandleRef jarg1, HandleRef jarg2, int jarg3);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool CombinedGeometry_IsEmpty(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr CombinedGeometry_Geometry1Property_get();

  [DllImport(Library.Name)]
  public static extern IntPtr CombinedGeometry_Geometry2Property_get();

  [DllImport(Library.Name)]
  public static extern IntPtr CombinedGeometry_GeometryCombineModeProperty_get();

  [DllImport(Library.Name)]
  public static extern void CombinedGeometry_Geometry1_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr CombinedGeometry_Geometry1_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void CombinedGeometry_Geometry2_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr CombinedGeometry_Geometry2_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void CombinedGeometry_GeometryCombineMode_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int CombinedGeometry_GeometryCombineMode_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PathSegment_IsSmoothJoinProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr PathSegment_IsStrokedProperty_get();

  [DllImport(Library.Name)]
  public static extern void PathSegment_IsSmoothJoin_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool PathSegment_IsSmoothJoin_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void PathSegment_IsStroked_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool PathSegment_IsStroked_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_PathSegmentCollection();

  [DllImport(Library.Name)]
  public static extern IntPtr new_PointCollection();

  [DllImport(Library.Name)]
  public static extern IntPtr new_LineSegment__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_LineSegment__SWIG_1(ref Point jarg1, bool jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr LineSegment_PointProperty_get();

  [DllImport(Library.Name)]
  public static extern void LineSegment_Point_set(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr LineSegment_Point_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_BezierSegment__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_BezierSegment__SWIG_1(ref Point jarg1, ref Point jarg2, ref Point jarg3, bool jarg4);

  [DllImport(Library.Name)]
  public static extern IntPtr BezierSegment_Point1Property_get();

  [DllImport(Library.Name)]
  public static extern IntPtr BezierSegment_Point2Property_get();

  [DllImport(Library.Name)]
  public static extern IntPtr BezierSegment_Point3Property_get();

  [DllImport(Library.Name)]
  public static extern void BezierSegment_Point1_set(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr BezierSegment_Point1_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void BezierSegment_Point2_set(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr BezierSegment_Point2_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void BezierSegment_Point3_set(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr BezierSegment_Point3_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_QuadraticBezierSegment__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_QuadraticBezierSegment__SWIG_1(ref Point jarg1, ref Point jarg2, bool jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr QuadraticBezierSegment_Point1Property_get();

  [DllImport(Library.Name)]
  public static extern IntPtr QuadraticBezierSegment_Point2Property_get();

  [DllImport(Library.Name)]
  public static extern void QuadraticBezierSegment_Point1_set(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr QuadraticBezierSegment_Point1_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void QuadraticBezierSegment_Point2_set(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr QuadraticBezierSegment_Point2_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_PolyLineSegment__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_PolyLineSegment__SWIG_1(ref Point jarg1, uint jarg2, bool jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr PolyLineSegment_PointsProperty_get();

  [DllImport(Library.Name)]
  public static extern void PolyLineSegment_Points_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr PolyLineSegment_Points_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_PolyBezierSegment__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_PolyBezierSegment__SWIG_1(ref Point jarg1, uint jarg2, bool jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr PolyBezierSegment_PointsProperty_get();

  [DllImport(Library.Name)]
  public static extern void PolyBezierSegment_Points_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr PolyBezierSegment_Points_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_PolyQuadraticBezierSegment__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_PolyQuadraticBezierSegment__SWIG_1(ref Point jarg1, uint jarg2, bool jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr PolyQuadraticBezierSegment_PointsProperty_get();

  [DllImport(Library.Name)]
  public static extern void PolyQuadraticBezierSegment_Points_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr PolyQuadraticBezierSegment_Points_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ArcSegment__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ArcSegment__SWIG_1(ref Point jarg1, ref Size jarg2, float jarg3, bool jarg4, int jarg5, bool jarg6);

  [DllImport(Library.Name)]
  public static extern IntPtr ArcSegment_PointProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ArcSegment_SizeProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ArcSegment_RotationAngleProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ArcSegment_IsLargeArcProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ArcSegment_SweepDirectionProperty_get();

  [DllImport(Library.Name)]
  public static extern void ArcSegment_Point_set(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ArcSegment_Point_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ArcSegment_Size_set(HandleRef jarg1, ref Size jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ArcSegment_Size_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ArcSegment_RotationAngle_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float ArcSegment_RotationAngle_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ArcSegment_IsLargeArc_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ArcSegment_IsLargeArc_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ArcSegment_SweepDirection_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int ArcSegment_SweepDirection_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_PathFigure();

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool PathFigure_IsEmpty(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PathFigure_IsClosedProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr PathFigure_IsFilledProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr PathFigure_SegmentsProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr PathFigure_StartPointProperty_get();

  [DllImport(Library.Name)]
  public static extern void PathFigure_IsClosed_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool PathFigure_IsClosed_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void PathFigure_IsFilled_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool PathFigure_IsFilled_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void PathFigure_Segments_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr PathFigure_Segments_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void PathFigure_StartPoint_set(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr PathFigure_StartPoint_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PathFigure_ToStringHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_PathFigureCollection();

  [DllImport(Library.Name)]
  public static extern IntPtr new_PathGeometry();

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool PathGeometry_IsEmpty(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PathGeometry_FiguresProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr PathGeometry_FillRuleProperty_get();

  [DllImport(Library.Name)]
  public static extern void PathGeometry_Figures_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr PathGeometry_Figures_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void PathGeometry_FillRule_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int PathGeometry_FillRule_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PathGeometry_ToStringHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void StreamGeometryContext_CloseCore(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void StreamGeometryContext_BeginFigureHelper(HandleRef jarg1, ref Point jarg2, bool jarg3);

  [DllImport(Library.Name)]
  public static extern void StreamGeometryContext_LineToHelper(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern void StreamGeometryContext_QuadraticBezierToHelper(HandleRef jarg1, ref Point jarg2, ref Point jarg3);

  [DllImport(Library.Name)]
  public static extern void StreamGeometryContext_BezierToHelper(HandleRef jarg1, ref Point jarg2, ref Point jarg3, ref Point jarg4);

  [DllImport(Library.Name)]
  public static extern void StreamGeometryContext_ArcToHelper(HandleRef jarg1, ref Point jarg2, ref Size jarg3, double jarg4, bool jarg5, int jarg6);

  [DllImport(Library.Name)]
  public static extern void delete_StreamGeometryContext(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_StreamGeometry__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_StreamGeometry__SWIG_1([MarshalAs(UnmanagedType.LPWStr)]string jarg1);

  [DllImport(Library.Name)]
  public static extern void StreamGeometry_SetData(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr StreamGeometry_Open(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool StreamGeometry_IsEmpty(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr StreamGeometry_FillRuleProperty_get();

  [DllImport(Library.Name)]
  public static extern void StreamGeometry_FillRule_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int StreamGeometry_FillRule_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr StreamGeometry_ToStringHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_GeometryGroup();

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool GeometryGroup_IsEmpty(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GeometryGroup_ChildrenProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr GeometryGroup_FillRuleProperty_get();

  [DllImport(Library.Name)]
  public static extern void GeometryGroup_Children_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GeometryGroup_Children_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GeometryGroup_FillRule_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int GeometryGroup_FillRule_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_DrawingContext();

  [DllImport(Library.Name)]
  public static extern void DrawingContext_DrawLine(HandleRef jarg1, HandleRef jarg2, ref Point jarg3, ref Point jarg4);

  [DllImport(Library.Name)]
  public static extern void DrawingContext_DrawRectangle(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, ref Rect jarg4);

  [DllImport(Library.Name)]
  public static extern void DrawingContext_DrawRoundedRectangle(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, ref Rect jarg4, float jarg5, float jarg6);

  [DllImport(Library.Name)]
  public static extern void DrawingContext_DrawEllipse(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, ref Point jarg4, float jarg5, float jarg6);

  [DllImport(Library.Name)]
  public static extern void DrawingContext_DrawGeometry(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4);

  [DllImport(Library.Name)]
  public static extern void DrawingContext_DrawImage(HandleRef jarg1, HandleRef jarg2, ref Rect jarg3);

  [DllImport(Library.Name)]
  public static extern void DrawingContext_DrawText(HandleRef jarg1, HandleRef jarg2, ref Rect jarg3);

  [DllImport(Library.Name)]
  public static extern void DrawingContext_Pop(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void DrawingContext_PushClip(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void DrawingContext_PushTransform(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void DrawingContext_PushBlendingMode(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_FontFamily__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_FontFamily__SWIG_1([MarshalAs(UnmanagedType.LPWStr)]string jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_FontFamily__SWIG_2([MarshalAs(UnmanagedType.LPWStr)]string jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern uint FontFamily_GetNumFonts(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FontFamily_GetFontPath(HandleRef jarg1, uint jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FontFamily_GetFontName(HandleRef jarg1, uint jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FontFamily_BaseUri_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FontFamily_Source_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_StaticResourceExtension__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_StaticResourceExtension__SWIG_1([MarshalAs(UnmanagedType.LPWStr)]string jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr StaticResourceExtension_ProvideValueHelper(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr new_DynamicResourceExtension__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_DynamicResourceExtension__SWIG_1([MarshalAs(UnmanagedType.LPWStr)]string jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr DynamicResourceExtension_ProvideValueHelper(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Visual_IsAncestorOf(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Visual_IsDescendantOf(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Visual_FindCommonVisualAncestor(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Visual_PointFromScreen(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Visual_PointToScreen(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Visual_TransformToAncestor(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Visual_TransformToDescendant(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Visual_TransformToVisual(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Visual_GetViewHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Visual_AddLayer(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void Visual_RemoveLayer(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Visual_GetVisualParentHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Visual_AddVisualChild(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void Visual_RemoveVisualChild(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualTreeHelper_GetContentBounds(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualTreeHelper_GetDescendantBounds(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float VisualTreeHelper_GetDescendantBoundsMinZ(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float VisualTreeHelper_GetDescendantBoundsMaxZ(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualTreeHelper_GetOffset(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualTreeHelper_GetSize(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualTreeHelper_GetClip(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualTreeHelper_GetRootHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualTreeHelper_GetParentHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int VisualTreeHelper_GetChildrenCountHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualTreeHelper_GetChildHelper(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern void VisualTreeHelper_HitTestHelper(HandleRef jarg1, ref Point jarg2, ref HitTestResult jarg3);

  [DllImport(Library.Name)]
  public static extern void VisualTreeHelper_HitTest3DHelper(HandleRef jarg1, ref Point3D jarg2, ref Point3D jarg3, ref HitTest3DResult jarg4);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool VisualTreeHelper_IntersectPlaneHelper(HandleRef jarg1, ref Point3D jarg2, ref Point3D jarg3, ref Point3D jarg4);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualCollection_Create(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr EventArgs_GetEmptyHelper();

  [DllImport(Library.Name)]
  public static extern IntPtr new_EventArgs();

  [DllImport(Library.Name)]
  public static extern void delete_EventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_RoutedEvent([MarshalAs(UnmanagedType.LPWStr)]string jarg1, IntPtr jarg2, int jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr RoutedEvent_Name_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RoutedEvent_OwnerType_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int RoutedEvent_RoutingStrategy_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RoutedEventArgs_Source_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RoutedEventArgs_RoutedEvent_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RoutedEventArgs_Handled_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool RoutedEventArgs_Handled_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_RoutedEventArgs(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void delete_RoutedEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool DataObjectEventArgs_CommandCancelled_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool DataObjectEventArgs_IsDragDrop_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void DataObjectEventArgs_CancelCommand(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void delete_DataObjectEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr DataObjectCopyingEventArgs_GetDataObjectHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void delete_DataObjectCopyingEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr DataObjectPastingEventArgs_GetSourceDataObjectHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr DataObjectPastingEventArgs_GetDataObjectHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void DataObjectPastingEventArgs_SetDataObjectHelper(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void delete_DataObjectPastingEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr DragDrop_PreviewQueryContinueDragEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr DragDrop_QueryContinueDragEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr DragDrop_PreviewGiveFeedbackEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr DragDrop_GiveFeedbackEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr DragDrop_PreviewDragEnterEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr DragDrop_DragEnterEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr DragDrop_PreviewDragOverEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr DragDrop_DragOverEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr DragDrop_PreviewDragLeaveEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr DragDrop_DragLeaveEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr DragDrop_PreviewDropEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr DragDrop_DropEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr new_InputEventArgs(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void delete_InputEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int MouseEventArgs_LeftButton_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int MouseEventArgs_MiddleButton_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int MouseEventArgs_RightButton_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int MouseEventArgs_XButton1_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int MouseEventArgs_XButton2_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_MouseEventArgs(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr MouseEventArgs_GetPosition(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void delete_MouseEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int MouseButtonEventArgs_ChangedButton_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int MouseButtonEventArgs_ButtonState_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_MouseButtonEventArgs(HandleRef jarg1, HandleRef jarg2, int jarg3, int jarg4, uint jarg5);

  [DllImport(Library.Name)]
  public static extern int MouseButtonEventArgs_GetClickCountHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void delete_MouseButtonEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int MouseWheelEventArgs_Delta_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int MouseWheelEventArgs_Orientation_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_MouseWheelEventArgs__SWIG_0(HandleRef jarg1, HandleRef jarg2, int jarg3, int jarg4);

  [DllImport(Library.Name)]
  public static extern IntPtr new_MouseWheelEventArgs__SWIG_1(HandleRef jarg1, HandleRef jarg2, int jarg3);

  [DllImport(Library.Name)]
  public static extern void delete_MouseWheelEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TouchEventArgs_GetTouchPoint(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_TouchEventArgs(HandleRef jarg1, HandleRef jarg2, ref Point jarg3, ulong jarg4);

  [DllImport(Library.Name)]
  public static extern ulong TouchEventArgs_GetTouchDeviceId(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void delete_TouchEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Manipulator_touchDevice_set(HandleRef jarg1, ulong jarg2);

  [DllImport(Library.Name)]
  public static extern ulong Manipulator_touchDevice_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Manipulator_position_set(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Manipulator_position_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Manipulator();

  [DllImport(Library.Name)]
  public static extern void delete_Manipulator(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ManipulationStartingEventArgs_Mode_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int ManipulationStartingEventArgs_Mode_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationStartingEventArgs_CreateHelper(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ManipulationStartingEventArgs_Cancel(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationStartingEventArgs_GetManipulationContainerHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ManipulationStartingEventArgs_SetManipulationContainerHelper(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void delete_ManipulationStartingEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationStartedEventArgs_ManipulationOrigin_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationStartedEventArgs_CreateHelper(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, ref Point jarg4);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ManipulationStartedEventArgs_Cancel(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ManipulationStartedEventArgs_Complete(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationStartedEventArgs_GetManipulationContainerHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void delete_ManipulationStartedEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ManipulationDelta_Rotation_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ManipulationDelta_GetScaleHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationDelta_GetTranslationHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationDelta_GetExpansionHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ManipulationDelta();

  [DllImport(Library.Name)]
  public static extern void delete_ManipulationDelta(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ManipulationVelocities_AngularVelocity_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float ManipulationVelocities_AngularVelocity_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ManipulationVelocities_ExpansionVelocity_set(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationVelocities_ExpansionVelocity_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ManipulationVelocities_LinearVelocity_set(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationVelocities_LinearVelocity_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ManipulationVelocities();

  [DllImport(Library.Name)]
  public static extern void delete_ManipulationVelocities(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationDeltaEventArgs_ManipulationOrigin_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationDeltaEventArgs_DeltaManipulation_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationDeltaEventArgs_CumulativeManipulation_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationDeltaEventArgs_Velocities_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ManipulationDeltaEventArgs_IsInertial_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationDeltaEventArgs_CreateHelper(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, ref Point jarg4, HandleRef jarg5, HandleRef jarg6, HandleRef jarg7, bool jarg8);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ManipulationDeltaEventArgs_Cancel(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ManipulationDeltaEventArgs_Complete(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationDeltaEventArgs_GetManipulationContainerHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void delete_ManipulationDeltaEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void InertiaExpansionBehavior_DesiredDeceleration_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float InertiaExpansionBehavior_DesiredDeceleration_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void InertiaExpansionBehavior_DesiredExpansion_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float InertiaExpansionBehavior_DesiredExpansion_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_InertiaExpansionBehavior();

  [DllImport(Library.Name)]
  public static extern void delete_InertiaExpansionBehavior(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void InertiaRotationBehavior_DesiredDeceleration_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float InertiaRotationBehavior_DesiredDeceleration_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void InertiaRotationBehavior_DesiredRotation_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float InertiaRotationBehavior_DesiredRotation_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_InertiaRotationBehavior();

  [DllImport(Library.Name)]
  public static extern void delete_InertiaRotationBehavior(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void InertiaTranslationBehavior_DesiredDeceleration_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float InertiaTranslationBehavior_DesiredDeceleration_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void InertiaTranslationBehavior_DesiredDisplacement_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float InertiaTranslationBehavior_DesiredDisplacement_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_InertiaTranslationBehavior();

  [DllImport(Library.Name)]
  public static extern void delete_InertiaTranslationBehavior(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ManipulationInertiaStartingEventArgs_ManipulationOrigin_set(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationInertiaStartingEventArgs_ManipulationOrigin_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationInertiaStartingEventArgs_InitialVelocities_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ManipulationInertiaStartingEventArgs_RotationBehavior_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationInertiaStartingEventArgs_RotationBehavior_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ManipulationInertiaStartingEventArgs_ExpansionBehavior_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationInertiaStartingEventArgs_ExpansionBehavior_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ManipulationInertiaStartingEventArgs_TranslationBehavior_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationInertiaStartingEventArgs_TranslationBehavior_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationInertiaStartingEventArgs_CreateHelper(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, ref Point jarg4, HandleRef jarg5);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ManipulationInertiaStartingEventArgs_Cancel(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationInertiaStartingEventArgs_GetManipulationContainerHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void delete_ManipulationInertiaStartingEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationCompletedEventArgs_ManipulationOrigin_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationCompletedEventArgs_FinalVelocities_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationCompletedEventArgs_TotalManipulation_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ManipulationCompletedEventArgs_IsInertial_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationCompletedEventArgs_CreateHelper(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, ref Point jarg4, HandleRef jarg5, HandleRef jarg6, bool jarg7);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ManipulationCompletedEventArgs_Cancel(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationCompletedEventArgs_GetManipulationContainerHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void delete_ManipulationCompletedEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_TappedEventArgs(HandleRef jarg1, HandleRef jarg2, ref Point jarg3, ulong jarg4);

  [DllImport(Library.Name)]
  public static extern void delete_TappedEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_DoubleTappedEventArgs(HandleRef jarg1, HandleRef jarg2, ref Point jarg3, ulong jarg4);

  [DllImport(Library.Name)]
  public static extern void delete_DoubleTappedEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int HoldingEventArgs_HoldingState_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_HoldingEventArgs(HandleRef jarg1, HandleRef jarg2, ref Point jarg3, ulong jarg4, int jarg5);

  [DllImport(Library.Name)]
  public static extern void delete_HoldingEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_RightTappedEventArgs(HandleRef jarg1, HandleRef jarg2, ref Point jarg3, ulong jarg4);

  [DllImport(Library.Name)]
  public static extern void delete_RightTappedEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_KeyboardEventArgs(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void delete_KeyboardEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr KeyboardFocusChangedEventArgs_OldFocus_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr KeyboardFocusChangedEventArgs_NewFocus_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_KeyboardFocusChangedEventArgs(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4);

  [DllImport(Library.Name)]
  public static extern void delete_KeyboardFocusChangedEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int KeyEventArgs_Key_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int KeyEventArgs_OriginalKey_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int KeyEventArgs_KeyStates_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_KeyEventArgs(HandleRef jarg1, HandleRef jarg2, int jarg3, int jarg4);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool KeyEventArgs_IsDown_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool KeyEventArgs_IsUp_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool KeyEventArgs_IsRepeat_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool KeyEventArgs_IsToggled_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void delete_KeyEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_TextCompositionEventArgs(HandleRef jarg1, HandleRef jarg2, uint jarg3);

  [DllImport(Library.Name)]
  public static extern uint TextCompositionEventArgs_GetTextHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void delete_TextCompositionEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void QueryCursorEventArgs_Cursor_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr QueryCursorEventArgs_Cursor_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_QueryCursorEventArgs(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void delete_QueryCursorEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool QueryContinueDragEventArgs_EscapePressed_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void QueryContinueDragEventArgs_Action_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int QueryContinueDragEventArgs_Action_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int QueryContinueDragEventArgs_GetKeyStatesHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void delete_QueryContinueDragEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GiveFeedbackEventArgs_UseDefaultCursors_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool GiveFeedbackEventArgs_UseDefaultCursors_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int GiveFeedbackEventArgs_GetEffectsHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void delete_GiveFeedbackEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr DragEventArgs_GetPosition(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr DragEventArgs_GetDataHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int DragEventArgs_GetKeyStatesHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int DragEventArgs_GetAllowedEffectsHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int DragEventArgs_GetEffectsHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void DragEventArgs_SetEffectsHelper(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern void delete_DragEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr SizeChangedInfo_NewSize_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr SizeChangedInfo_PreviousSize_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool SizeChangedInfo_WidthChanged_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool SizeChangedInfo_HeightChanged_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr SizeChangedInfo_CreateHelper(ref Size jarg1, ref Size jarg2, bool jarg3, bool jarg4);

  [DllImport(Library.Name)]
  public static extern IntPtr new_SizeChangedInfo();

  [DllImport(Library.Name)]
  public static extern void delete_SizeChangedInfo(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Mouse_GetPosition(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int Mouse_GetButtonState(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Mouse_Capture__SWIG_0(HandleRef jarg1, HandleRef jarg2, int jarg3);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Mouse_Capture__SWIG_1(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Mouse_GotMouseCaptureEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Mouse_LostMouseCaptureEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Mouse_MouseDownEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Mouse_MouseEnterEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Mouse_MouseLeaveEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Mouse_MouseMoveEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Mouse_MouseUpEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Mouse_MouseWheelEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Mouse_PreviewMouseDownEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Mouse_PreviewMouseMoveEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Mouse_PreviewMouseUpEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Mouse_PreviewMouseWheelEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Mouse_QueryCursorEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Mouse_Captured_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Mouse_GetPositionHelper(HandleRef jarg1, out Point jarg2);

  [DllImport(Library.Name)]
  public static extern int Keyboard_GetKeyStates(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Keyboard_IsKeyDown(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Keyboard_IsKeyUp(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Keyboard_IsKeyToggled(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Keyboard_Focus(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Keyboard_IsFocusable(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void Keyboard_ClearFocus(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Keyboard_GotKeyboardFocusEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Keyboard_KeyDownEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Keyboard_KeyUpEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Keyboard_LostKeyboardFocusEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Keyboard_PreviewGotKeyboardFocusEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Keyboard_PreviewKeyDownEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Keyboard_PreviewKeyUpEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Keyboard_PreviewLostKeyboardFocusEvent_get();

  [DllImport(Library.Name)]
  public static extern int Keyboard_Modifiers_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Keyboard_FocusedElement_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FocusManager_GetFocusedElement(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FocusManager_SetFocusedElement(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool FocusManager_GetIsFocusScope(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FocusManager_SetIsFocusScope(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FocusManager_GetFocusScope(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FocusManager_AddGotFocusHandler(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void FocusManager_RemoveGotFocusHandler(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void FocusManager_AddLostFocusHandler(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void FocusManager_RemoveLostFocusHandler(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FocusManager_FocusedElementProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr FocusManager_IsFocusScopeProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr FocusManager_LostFocusEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr FocusManager_GotFocusEvent_get();

  [DllImport(Library.Name)]
  public static extern int TraversalRequest_FocusNavigationDirection_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TraversalRequest_Wrapped_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool TraversalRequest_Wrapped_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_TraversalRequest(int jarg1);

  [DllImport(Library.Name)]
  public static extern void delete_TraversalRequest(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_UIElement();

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_CaptureMouse(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void UIElement_ReleaseMouseCapture(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_TranslatePoint(HandleRef jarg1, ref Point jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_CaptureTouch(HandleRef jarg1, ulong jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_ReleaseTouchCapture(HandleRef jarg1, ulong jarg2);

  [DllImport(Library.Name)]
  public static extern void UIElement_ReleaseAllTouchCaptures(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_GetTouchCaptured(HandleRef jarg1, ulong jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_Focus__SWIG_0(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_Focus__SWIG_1(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  public static extern void UIElement_InvalidateMeasure(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_IsMeasureValid(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void UIElement_Measure(HandleRef jarg1, ref Size jarg2);

  [DllImport(Library.Name)]
  public static extern void UIElement_InvalidateArrange(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_IsArrangeValid(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void UIElement_Arrange(HandleRef jarg1, ref Rect jarg2);

  [DllImport(Library.Name)]
  public static extern void UIElement_InvalidateVisual(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void UIElement_UpdateLayout(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_MoveFocus(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_PredictFocus(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern void UIElement_RaiseEvent(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_AllowDropProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_ClipProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_ClipToBoundsProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_EffectProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_FocusableProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_IsEnabledProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_IsFocusedProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_IsHitTestVisibleProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_IsKeyboardFocusedProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_IsKeyboardFocusWithinProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_IsMouseCapturedProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_IsMouseCaptureWithinProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_IsMouseDirectlyOverProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_IsMouseOverProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_IsManipulationEnabledProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_IsTapEnabledProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_IsDoubleTapEnabledProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_IsHoldingEnabledProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_IsRightTapEnabledProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_IsVisibleProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_OpacityMaskProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_OpacityProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_RenderTransformOriginProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_RenderTransformProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_Transform3DProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_VisibilityProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_GotFocusEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_GotKeyboardFocusEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_GotMouseCaptureEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_KeyDownEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_KeyUpEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_LostFocusEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_LostKeyboardFocusEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_LostMouseCaptureEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_MouseDownEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_MouseEnterEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_MouseLeaveEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_MouseLeftButtonDownEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_MouseLeftButtonUpEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_MouseMoveEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_MouseRightButtonDownEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_MouseRightButtonUpEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_MouseUpEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_MouseWheelEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_TouchDownEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_TouchMoveEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_TouchUpEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_TouchEnterEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_TouchLeaveEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_GotTouchCaptureEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_LostTouchCaptureEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_PreviewTouchDownEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_PreviewTouchMoveEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_PreviewTouchUpEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_ManipulationStartingEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_ManipulationStartedEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_ManipulationDeltaEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_ManipulationInertiaStartingEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_ManipulationCompletedEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_TappedEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_DoubleTappedEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_HoldingEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_RightTappedEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_PreviewGotKeyboardFocusEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_PreviewKeyDownEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_PreviewKeyUpEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_PreviewLostKeyboardFocusEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_PreviewMouseDownEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_PreviewMouseLeftButtonDownEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_PreviewMouseLeftButtonUpEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_PreviewMouseMoveEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_PreviewMouseRightButtonDownEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_PreviewMouseRightButtonUpEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_PreviewMouseUpEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_PreviewMouseWheelEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_PreviewTextInputEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_QueryCursorEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_TextInputEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_PreviewQueryContinueDragEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_QueryContinueDragEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_PreviewGiveFeedbackEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_GiveFeedbackEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_PreviewDragEnterEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_DragEnterEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_PreviewDragOverEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_DragOverEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_PreviewDragLeaveEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_DragLeaveEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_PreviewDropEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_DropEvent_get();

  [DllImport(Library.Name)]
  public static extern void UIElement_AllowDrop_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_AllowDrop_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void UIElement_Clip_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_Clip_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void UIElement_ClipToBounds_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_ClipToBounds_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void UIElement_Effect_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_Effect_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void UIElement_Focusable_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_Focusable_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void UIElement_IsEnabled_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_IsEnabled_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_IsFocused_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void UIElement_IsHitTestVisible_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_IsHitTestVisible_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_IsKeyboardFocused_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_IsKeyboardFocusWithin_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_IsMouseCaptured_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_IsMouseCaptureWithin_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_IsMouseDirectlyOver_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_IsMouseOver_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void UIElement_IsManipulationEnabled_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_IsManipulationEnabled_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void UIElement_IsTapEnabled_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_IsTapEnabled_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void UIElement_IsDoubleTapEnabled_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_IsDoubleTapEnabled_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void UIElement_IsHoldingEnabled_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_IsHoldingEnabled_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void UIElement_IsRightTapEnabled_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_IsRightTapEnabled_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_IsVisible_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void UIElement_OpacityMask_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_OpacityMask_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void UIElement_Opacity_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float UIElement_Opacity_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void UIElement_RenderTransformOrigin_set(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_RenderTransformOrigin_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void UIElement_RenderTransform_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_RenderTransform_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void UIElement_Transform3D_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_Transform3D_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void UIElement_Visibility_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int UIElement_Visibility_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_CommandBindings_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_InputBindings_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_DesiredSize_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_RenderSize_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_Mouse_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_Keyboard_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void UIElement_IgnoreLayout(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_UIElementCollection(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr RenderOptions_BitmapScalingModeProperty_get();

  [DllImport(Library.Name)]
  public static extern int RenderOptions_GetBitmapScalingMode(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RenderOptions_SetBitmapScalingMode(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_SetterBaseCollection();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ResourceDictionary();

  [DllImport(Library.Name)]
  public static extern void ResourceDictionary_Clear(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ResourceDictionary_MergedDictionaries_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ResourceDictionary_Source_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ResourceDictionary_Source_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int ResourceDictionary_Count_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ResourceDictionary_IsReadOnly_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ResourceDictionary_GetValueHelper(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern void ResourceDictionary_SetValueHelper(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ResourceDictionary_ContainsHelper(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern void ResourceDictionary_AddHelper(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern void ResourceDictionary_RemoveHelper(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ResourceDictionaryCollection();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Style();

  [DllImport(Library.Name)]
  public static extern void Style_Seal(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Style_TargetType_set(HandleRef jarg1, IntPtr jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Style_TargetType_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Style_BasedOn_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Style_BasedOn_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Style_Resources_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Style_Resources_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Style_Setters_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Style_Triggers_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Style_CanSeal_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Style_IsSealed_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_RelativeSource__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_RelativeSource__SWIG_1(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_RelativeSource__SWIG_2(int jarg1, IntPtr jarg2, int jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr new_RelativeSource__SWIG_3(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RelativeSource_Self_get();

  [DllImport(Library.Name)]
  public static extern IntPtr RelativeSource_TemplatedParent_get();

  [DllImport(Library.Name)]
  public static extern void RelativeSource_Mode_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int RelativeSource_Mode_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RelativeSource_AncestorType_set(HandleRef jarg1, IntPtr jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr RelativeSource_AncestorType_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RelativeSource_AncestorLevel_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int RelativeSource_AncestorLevel_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RelativeSource_ProvideValueHelper(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern void BindingBase_Delay_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int BindingBase_Delay_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void BindingBase_TargetNullValue_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr BindingBase_TargetNullValue_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void BindingBase_FallbackValue_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr BindingBase_FallbackValue_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void BindingBase_StringFormat_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr BindingBase_StringFormat_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_BindingCollection();

  [DllImport(Library.Name)]
  public static extern void BindingExpressionBase_UpdateTarget(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void BindingExpressionBase_UpdateSource(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr BindingExpressionBase_Target_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr BindingExpressionBase_TargetProperty_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr BindingExpressionBase_ParentBindingBase_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void BindingExpression_UpdateTarget(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void BindingExpression_UpdateSource(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr BindingExpression_ParentBinding_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr BindingExpression_ResolvedSource_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void MultiBindingExpression_UpdateTarget(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void MultiBindingExpression_UpdateSource(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr MultiBindingExpression_ParentBinding_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_TemplateBindingExtension__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_TemplateBindingExtension__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TemplateBindingExtension_Property_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TemplateBindingExtension_Property_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TemplateBindingExtension_ProvideValueHelper(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr TemplateBindingExpression_TemplateBindingExtension_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_PPAAMode(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_PPAAMode(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenuEventArgs_TargetElement_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ContextMenuEventArgs_CursorLeft_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ContextMenuEventArgs_CursorTop_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ContextMenuEventArgs__SWIG_0(HandleRef jarg1, HandleRef jarg2, float jarg3, float jarg4);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ContextMenuEventArgs__SWIG_1(HandleRef jarg1, HandleRef jarg2, float jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ContextMenuEventArgs__SWIG_2(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void delete_ContextMenuEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ToolTipEventArgs(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void delete_ToolTipEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RequestBringIntoViewEventArgs_TargetObject_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RequestBringIntoViewEventArgs_TargetRect_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_RequestBringIntoViewEventArgs(HandleRef jarg1, HandleRef jarg2, ref Rect jarg3);

  [DllImport(Library.Name)]
  public static extern void delete_RequestBringIntoViewEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr SizeChangedEventArgs_NewSize_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr SizeChangedEventArgs_PreviousSize_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool SizeChangedEventArgs_WidthChanged_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool SizeChangedEventArgs_HeightChanged_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_SizeChangedEventArgs(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern void delete_SizeChangedEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_FrameworkElement();

  [DllImport(Library.Name)]
  public static extern int FrameworkElement_GetFlowDirection(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_SetFlowDirection(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_GetBindingExpression(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_SetBinding__SWIG_0(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_SetBinding__SWIG_1(HandleRef jarg1, HandleRef jarg2, [MarshalAs(UnmanagedType.LPWStr)]string jarg3);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_BringIntoView__SWIG_0(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_BringIntoView__SWIG_1(HandleRef jarg1, ref Rect jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool FrameworkElement_ApplyTemplate(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_GetTemplateChild(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_FindName(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_RegisterName(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_UnregisterName(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_UpdateName(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool FrameworkElement_MoveFocus(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_PredictFocus(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_ActualHeightProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_ActualWidthProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_BlendingModeProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_ContextMenuProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_CursorProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_DataContextProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_DefaultStyleKeyProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_FlowDirectionProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_FocusVisualStyleProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_ForceCursorProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_HeightProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_HorizontalAlignmentProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_InputScopeProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_LayoutTransformProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_MarginProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_MaxHeightProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_MaxWidthProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_MinHeightProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_MinWidthProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_NameProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_OverridesDefaultStyleProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_PPAAModeProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_PPAAInProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_PPAAOutProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_StyleProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_TagProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_ToolTipProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_UseLayoutRoundingProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_VerticalAlignmentProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_WidthProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_ContextMenuClosingEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_ContextMenuOpeningEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_LoadedEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_ReloadedEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_RequestBringIntoViewEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_SizeChangedEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_ToolTipClosingEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_ToolTipOpeningEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_UnloadedEvent_get();

  [DllImport(Library.Name)]
  public static extern float FrameworkElement_ActualHeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float FrameworkElement_ActualWidth_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_BlendingMode_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int FrameworkElement_BlendingMode_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_ContextMenu_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_ContextMenu_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_Cursor_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_Cursor_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_DataContext_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_DataContext_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_DefaultStyleKey_set(HandleRef jarg1, IntPtr jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_DefaultStyleKey_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_FlowDirection_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int FrameworkElement_FlowDirection_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_FocusVisualStyle_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_FocusVisualStyle_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_ForceCursor_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool FrameworkElement_ForceCursor_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_Height_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float FrameworkElement_Height_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_HorizontalAlignment_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int FrameworkElement_HorizontalAlignment_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_InputScope_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int FrameworkElement_InputScope_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool FrameworkElement_IsInitialized_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool FrameworkElement_IsLoaded_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_LayoutTransform_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_LayoutTransform_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_Margin_set(HandleRef jarg1, ref Thickness jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_Margin_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_MaxHeight_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float FrameworkElement_MaxHeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_MaxWidth_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float FrameworkElement_MaxWidth_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_MinHeight_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float FrameworkElement_MinHeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_MinWidth_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float FrameworkElement_MinWidth_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_Name_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_Name_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_OverridesDefaultStyle_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool FrameworkElement_OverridesDefaultStyle_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_PPAAMode_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int FrameworkElement_PPAAMode_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_PPAAIn_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float FrameworkElement_PPAAIn_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_PPAAOut_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float FrameworkElement_PPAAOut_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_Style_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_Style_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_Tag_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_Tag_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_ToolTip_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_ToolTip_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_UseLayoutRounding_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool FrameworkElement_UseLayoutRounding_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_VerticalAlignment_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int FrameworkElement_VerticalAlignment_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_Width_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float FrameworkElement_Width_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_Triggers_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_Parent_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_TemplatedParent_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_Resources_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_Resources_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_FindTreeElement(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_FindTreeParent(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Typography_AnnotationAlternatesProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Typography_CapitalsProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Typography_CapitalSpacingProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Typography_CaseSensitiveFormsProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Typography_ContextualAlternatesProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Typography_ContextualLigaturesProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Typography_ContextualSwashesProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Typography_DiscretionaryLigaturesProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Typography_EastAsianExpertFormsProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Typography_EastAsianLanguageProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Typography_EastAsianWidthsProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Typography_FractionProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Typography_HistoricalFormsProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Typography_HistoricalLigaturesProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Typography_KerningProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Typography_MathematicalGreekProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Typography_NumeralAlignmentProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Typography_NumeralStyleProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Typography_SlashedZeroProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Typography_StandardLigaturesProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Typography_StandardSwashesProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Typography_StylisticAlternatesProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Typography_StylisticSet1Property_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Typography_StylisticSet2Property_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Typography_StylisticSet3Property_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Typography_StylisticSet4Property_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Typography_StylisticSet5Property_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Typography_StylisticSet6Property_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Typography_StylisticSet7Property_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Typography_StylisticSet8Property_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Typography_StylisticSet9Property_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Typography_StylisticSet10Property_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Typography_StylisticSet11Property_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Typography_StylisticSet12Property_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Typography_StylisticSet13Property_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Typography_StylisticSet14Property_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Typography_StylisticSet15Property_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Typography_StylisticSet16Property_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Typography_StylisticSet17Property_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Typography_StylisticSet18Property_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Typography_StylisticSet19Property_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Typography_StylisticSet20Property_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Typography_VariantsProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TextElement_GetFontFamily(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextElement_SetFontFamily(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern float TextElement_GetFontSize(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextElement_SetFontSize(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern int TextElement_GetFontStretch(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextElement_SetFontStretch(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextElement_GetFontStyle(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextElement_SetFontStyle(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextElement_GetFontWeight(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextElement_SetFontWeight(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TextElement_GetForeground(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextElement_SetForeground(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TextElement_GetStroke(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextElement_SetStroke(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern float TextElement_GetStrokeThickness(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextElement_SetStrokeThickness(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TextElement_BackgroundProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TextElement_CharacterSpacingProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TextElement_FontFamilyProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TextElement_FontSizeProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TextElement_FontStretchProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TextElement_FontStyleProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TextElement_FontWeightProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TextElement_ForegroundProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TextElement_StrokeProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TextElement_StrokeThicknessProperty_get();

  [DllImport(Library.Name)]
  public static extern void TextElement_Background_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TextElement_Background_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextElement_CharacterSpacing_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextElement_CharacterSpacing_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextElement_FontFamily_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TextElement_FontFamily_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextElement_FontSize_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float TextElement_FontSize_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextElement_FontStretch_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextElement_FontStretch_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextElement_FontStyle_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextElement_FontStyle_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextElement_FontWeight_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextElement_FontWeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextElement_Foreground_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TextElement_Foreground_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextElement_Stroke_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TextElement_Stroke_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextElement_StrokeThickness_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float TextElement_StrokeThickness_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int Inline_GetFlowDirection(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Inline_SetFlowDirection(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Inline_FlowDirectionProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Inline_TextDecorationsProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Inline_SiblingInlines_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Inline_PreviousInline_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Inline_NextInline_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Inline_TextDecorations_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Inline_TextDecorations_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_InlineCollection();

  [DllImport(Library.Name)]
  public static extern IntPtr new_LineBreak();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Run__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Run__SWIG_1([MarshalAs(UnmanagedType.LPWStr)]string jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Run_TextProperty_get();

  [DllImport(Library.Name)]
  public static extern void Run_Text_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Run_Text_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Span__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Span__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Span_Inlines_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Bold__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Bold__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Italic__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Italic__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Underline__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Underline__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RequestNavigateEventArgs_Uri_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RequestNavigateEventArgs_Target_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_RequestNavigateEventArgs(HandleRef jarg1, HandleRef jarg2, [MarshalAs(UnmanagedType.LPWStr)]string jarg3, [MarshalAs(UnmanagedType.LPWStr)]string jarg4);

  [DllImport(Library.Name)]
  public static extern void delete_RequestNavigateEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Hyperlink__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Hyperlink__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Hyperlink_CommandProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Hyperlink_CommandParameterProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Hyperlink_CommandTargetProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Hyperlink_NavigateUriProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Hyperlink_TargetNameProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Hyperlink_ClickEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Hyperlink_RequestNavigateEvent_get();

  [DllImport(Library.Name)]
  public static extern void Hyperlink_CommandParameter_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Hyperlink_CommandParameter_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Hyperlink_CommandTarget_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Hyperlink_CommandTarget_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Hyperlink_TargetName_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Hyperlink_TargetName_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Hyperlink_GetCommandHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Hyperlink_SetCommandHelper(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Hyperlink_GetNavigateUriHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Hyperlink_SetNavigateUriHelper(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_InlineUIContainer__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_InlineUIContainer__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void InlineUIContainer_Child_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr InlineUIContainer_Child_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr LogicalTreeHelper_GetParentHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int LogicalTreeHelper_GetChildrenCountHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr LogicalTreeHelper_GetChildHelper(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr LogicalTreeHelper_FindLogicalNodeHelper(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkTemplate_FindName__SWIG_0(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkTemplate_FindName__SWIG_1(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern void FrameworkTemplate_RegisterName(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern void FrameworkTemplate_UnregisterName(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern void FrameworkTemplate_UpdateName(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern void FrameworkTemplate_Seal(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkTemplate_Resources_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkTemplate_Resources_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkTemplate_VisualTree_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkTemplate_VisualTree_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool FrameworkTemplate_CanSeal_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool FrameworkTemplate_IsSealed_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ControlTemplate();

  [DllImport(Library.Name)]
  public static extern void ControlTemplate_TargetType_set(HandleRef jarg1, IntPtr jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ControlTemplate_TargetType_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ControlTemplate_Triggers_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_DataTemplateSelector();

  [DllImport(Library.Name)]
  public static extern IntPtr new_DataTemplate();

  [DllImport(Library.Name)]
  public static extern void DataTemplate_DataType_set(HandleRef jarg1, IntPtr jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr DataTemplate_DataType_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr DataTemplate_Triggers_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_HierarchicalDataTemplate();

  [DllImport(Library.Name)]
  public static extern void HierarchicalDataTemplate_ItemContainerStyle_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr HierarchicalDataTemplate_ItemContainerStyle_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void HierarchicalDataTemplate_ItemsSource_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr HierarchicalDataTemplate_ItemsSource_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void HierarchicalDataTemplate_ItemTemplate_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr HierarchicalDataTemplate_ItemTemplate_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void HierarchicalDataTemplate_ItemTemplateSelector_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr HierarchicalDataTemplate_ItemTemplateSelector_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Control();

  [DllImport(Library.Name)]
  public static extern IntPtr Control_BackgroundProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Control_BorderBrushProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Control_BorderThicknessProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Control_FontFamilyProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Control_FontSizeProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Control_FontStretchProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Control_FontStyleProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Control_FontWeightProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Control_ForegroundProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Control_HorizontalContentAlignmentProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Control_IsTabStopProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Control_PaddingProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Control_TabIndexProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Control_TemplateProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Control_VerticalContentAlignmentProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Control_IsFocusEngagedProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Control_IsFocusEngagementEnabledProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Control_XYFocusLeftProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Control_XYFocusRightProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Control_XYFocusUpProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Control_XYFocusDownProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Control_MouseDoubleClickEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Control_PreviewMouseDoubleClickEvent_get();

  [DllImport(Library.Name)]
  public static extern void Control_Background_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Control_Background_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Control_BorderBrush_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Control_BorderBrush_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Control_BorderThickness_set(HandleRef jarg1, ref Thickness jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Control_BorderThickness_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Control_FontFamily_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Control_FontFamily_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Control_FontSize_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Control_FontSize_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Control_FontStretch_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Control_FontStretch_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Control_FontStyle_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Control_FontStyle_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Control_FontWeight_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Control_FontWeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Control_Foreground_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Control_Foreground_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Control_HorizontalContentAlignment_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Control_HorizontalContentAlignment_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Control_IsTabStop_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Control_IsTabStop_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Control_Padding_set(HandleRef jarg1, ref Thickness jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Control_Padding_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Control_TabIndex_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Control_TabIndex_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Control_Template_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Control_Template_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Control_VerticalContentAlignment_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Control_VerticalContentAlignment_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Control_IsFocusEngaged_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Control_IsFocusEngaged_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Control_IsFocusEngagementEnabled_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Control_IsFocusEngagementEnabled_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Control_XYFocusLeft_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Control_XYFocusLeft_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Control_XYFocusRight_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Control_XYFocusRight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Control_XYFocusUp_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Control_XYFocusUp_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Control_XYFocusDown_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Control_XYFocusDown_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ContentControl();

  [DllImport(Library.Name)]
  public static extern IntPtr ContentControl_ContentProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ContentControl_ContentStringFormatProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ContentControl_ContentTemplateProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ContentControl_ContentTemplateSelectorProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ContentControl_HasContentProperty_get();

  [DllImport(Library.Name)]
  public static extern void ContentControl_Content_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ContentControl_Content_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ContentControl_ContentStringFormat_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ContentControl_ContentStringFormat_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ContentControl_ContentTemplate_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ContentControl_ContentTemplate_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ContentControl_ContentTemplateSelector_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ContentControl_ContentTemplateSelector_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ContentControl_HasContent_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ContentControl_ToStringHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_UserControl();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Decorator__SWIG_0(bool jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Decorator__SWIG_1();

  [DllImport(Library.Name)]
  public static extern void Decorator_Child_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Decorator_Child_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int Panel_GetZIndex(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Panel_SetZIndex(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Panel_BackgroundProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Panel_IsItemsHostProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Panel_ZIndexProperty_get();

  [DllImport(Library.Name)]
  public static extern void Panel_Background_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Panel_Background_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Panel_IsItemsHost_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Panel_IsItemsHost_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Panel_Children_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ItemCollection(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ItemCollection_Set(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern int ItemCollection_Add(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void ItemCollection_Insert(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern int ItemCollection_IndexOf(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ItemCollection_Remove(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void ItemCollection_RemoveAt(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern void ItemCollection_Clear(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ItemCollection_Contains(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ItemCollection_MoveCurrentTo(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ItemCollection_MoveCurrentToFirst(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ItemCollection_MoveCurrentToLast(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ItemCollection_MoveCurrentToNext(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ItemCollection_MoveCurrentToPosition(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ItemCollection_MoveCurrentToPrevious(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ItemCollection_Refresh(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ItemCollection_CanFilter_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ItemCollection_CanGroup_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ItemCollection_CanSort_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemCollection_CurrentItem_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int ItemCollection_CurrentPosition_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ItemCollection_IsCurrentAfterLast_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ItemCollection_IsCurrentBeforeFirst_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ItemCollection_IsEmpty_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int ItemCollection_Count_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemCollection_GetItemAtHelper(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ItemsPanelTemplate();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ItemsPresenter();

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsChangedEventArgs_Position_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsChangedEventArgs_OldPosition_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int ItemsChangedEventArgs_ItemCount_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int ItemsChangedEventArgs_ItemUICount_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsChangedEventArgs_CreateHelper1(int jarg1, ref GeneratorPosition jarg2, ref GeneratorPosition jarg3, int jarg4, int jarg5);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsChangedEventArgs_CreateHelper2(int jarg1, ref GeneratorPosition jarg2, int jarg3, int jarg4);

  [DllImport(Library.Name)]
  public static extern int ItemsChangedEventArgs_GetActionHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void delete_ItemsChangedEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemContainerGenerator_ContainerFromIndex(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemContainerGenerator_ContainerFromItem(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern int ItemContainerGenerator_IndexFromContainer(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemContainerGenerator_ItemFromContainer(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void ItemContainerGenerator_StartBatch(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ItemContainerGenerator_StopBatch(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int ItemContainerGenerator_Status_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemContainerGenerator_GetItemContainerGeneratorForPanelHelper(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void ItemContainerGenerator_GeneratorPositionFromIndexHelper(HandleRef jarg1, int jarg2, ref GeneratorPosition jarg3);

  [DllImport(Library.Name)]
  public static extern int ItemContainerGenerator_IndexFromGeneratorPositionHelper(HandleRef jarg1, ref GeneratorPosition jarg2);

  [DllImport(Library.Name)]
  public static extern void ItemContainerGenerator_StartAtHelper(HandleRef jarg1, ref GeneratorPosition jarg2, int jarg3, bool jarg4);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemContainerGenerator_GenerateNextHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemContainerGenerator_GenerateNextRealizedHelper(HandleRef jarg1, ref bool jarg2);

  [DllImport(Library.Name)]
  public static extern void ItemContainerGenerator_StopHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ItemContainerGenerator_PrepareItemContainerHelper(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void ItemContainerGenerator_RemoveAllHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ItemContainerGenerator_RemoveHelper(HandleRef jarg1, ref GeneratorPosition jarg2, int jarg3);

  [DllImport(Library.Name)]
  public static extern void ItemContainerGenerator_RecycleHelper(HandleRef jarg1, ref GeneratorPosition jarg2, int jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ItemsControl();

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsControl_ItemsControlFromItemContainer(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsControl_ContainerFromElement__SWIG_0(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsControl_GetItemsOwner(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ItemsControl_IsItemItsOwnContainer(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsControl_AlternationCountProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsControl_AlternationIndexProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsControl_DisplayMemberPathProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsControl_HasItemsProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsControl_ItemContainerStyleProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsControl_ItemsPanelProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsControl_ItemsSourceProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsControl_ItemTemplateProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsControl_ItemTemplateSelectorProperty_get();

  [DllImport(Library.Name)]
  public static extern void ItemsControl_AlternationCount_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int ItemsControl_AlternationCount_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ItemsControl_DisplayMemberPath_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsControl_DisplayMemberPath_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ItemsControl_HasItems_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsControl_ItemContainerGenerator_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ItemsControl_ItemContainerStyle_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsControl_ItemContainerStyle_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ItemsControl_ItemsPanel_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsControl_ItemsPanel_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ItemsControl_ItemTemplate_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsControl_ItemTemplate_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ItemsControl_ItemTemplateSelector_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsControl_ItemTemplateSelector_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsControl_Items_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int ItemsControl_Get_AlternationIndex(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsControl_Get_ContainerFromElement(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsControl_Get_ItemsSource(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ItemsControl_Set_ItemsSource(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_SelectionChangedEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool SelectionChangedEventArgs_ContainsListHelper(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern int SelectionChangedEventArgs_IndexOfListHelper(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr SelectionChangedEventArgs_GetItemListHelper(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport(Library.Name)]
  public static extern int SelectionChangedEventArgs_CountListHelper(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern void delete_SelectionChangedEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Selector_GetIsSelected(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Selector_SetIsSelected(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Selector_GetIsSelectionActive(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Selector_IsSelectedProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Selector_IsSelectionActiveProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Selector_IsSynchronizedWithCurrentItemProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Selector_SelectedIndexProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Selector_SelectedItemProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Selector_SelectedValueProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Selector_SelectedValuePathProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Selector_SelectedEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Selector_SelectionChangedEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Selector_UnselectedEvent_get();

  [DllImport(Library.Name)]
  public static extern void Selector_IsSynchronizedWithCurrentItem_set(HandleRef jarg1, ref NullableBool jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Selector_IsSynchronizedWithCurrentItem_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Selector_SelectedIndex_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Selector_SelectedIndex_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Selector_SelectedItem_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Selector_SelectedItem_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Selector_SelectedValue_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Selector_SelectedValue_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Selector_SelectedValuePath_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Selector_SelectedValuePath_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Adorner_AdornedElement_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Adorner_IsClipEnabled_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Adorner_IsClipEnabled_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Adorner_SetAdornedElement(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_AdornerLayer();

  [DllImport(Library.Name)]
  public static extern IntPtr AdornerLayer_GetAdornerLayer(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void AdornerLayer_Add(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void AdornerLayer_Remove(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void AdornerLayer_Update__SWIG_0(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void AdornerLayer_Update__SWIG_1(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_AdornerDecorator__SWIG_0(bool jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_AdornerDecorator__SWIG_1();

  [DllImport(Library.Name)]
  public static extern IntPtr AdornerDecorator_GetAdornerLayer(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ApplicationCommands_CancelPrint_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ApplicationCommands_Close_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ApplicationCommands_ContextMenu_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ApplicationCommands_Copy_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ApplicationCommands_CorrectionList_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ApplicationCommands_Cut_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ApplicationCommands_Delete_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ApplicationCommands_Find_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ApplicationCommands_Help_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ApplicationCommands_New_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ApplicationCommands_Open_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ApplicationCommands_Paste_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ApplicationCommands_Print_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ApplicationCommands_PrintPreview_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ApplicationCommands_Properties_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ApplicationCommands_Redo_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ApplicationCommands_Replace_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ApplicationCommands_Save_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ApplicationCommands_SaveAs_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ApplicationCommands_SelectAll_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ApplicationCommands_Stop_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ApplicationCommands_Undo_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_ExtendSelectionDown_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_ExtendSelectionLeft_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_ExtendSelectionRight_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_ExtendSelectionUp_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_MoveDown_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_MoveFocusBack_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_MoveFocusDown_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_MoveFocusForward_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_MoveFocusPageDown_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_MoveFocusPageUp_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_MoveFocusUp_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_MoveLeft_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_MoveRight_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_MoveToEnd_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_MoveToHome_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_MoveToPageDown_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_MoveToPageUp_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_MoveUp_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_ScrollByLine_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_ScrollPageDown_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_ScrollPageLeft_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_ScrollPageRight_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_ScrollPageUp_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_SelectToEnd_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_SelectToHome_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_SelectToPageDown_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_SelectToPageUp_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ButtonBase_ClickModeProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ButtonBase_CommandProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ButtonBase_CommandParameterProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ButtonBase_CommandTargetProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ButtonBase_IsPressedProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ButtonBase_ClickEvent_get();

  [DllImport(Library.Name)]
  public static extern void ButtonBase_ClickMode_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int ButtonBase_ClickMode_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ButtonBase_CommandParameter_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ButtonBase_CommandParameter_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ButtonBase_CommandTarget_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ButtonBase_CommandTarget_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ButtonBase_IsPressed_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ButtonBase_GetCommandHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ButtonBase_SetCommandHelper(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ToggleButton();

  [DllImport(Library.Name)]
  public static extern IntPtr ToggleButton_IsCheckedProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ToggleButton_IsThreeStateProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ToggleButton_CheckedEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ToggleButton_IndeterminateEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ToggleButton_UncheckedEvent_get();

  [DllImport(Library.Name)]
  public static extern void ToggleButton_IsChecked_set(HandleRef jarg1, ref NullableBool jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ToggleButton_IsChecked_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToggleButton_IsThreeState_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ToggleButton_IsThreeState_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBoxBase_LineLeft(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBoxBase_LineRight(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBoxBase_PageLeft(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBoxBase_PageRight(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBoxBase_LineUp(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBoxBase_LineDown(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBoxBase_PageUp(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBoxBase_PageDown(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBoxBase_ScrollToHome(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBoxBase_ScrollToEnd(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBoxBase_ScrollToHorizontalOffset(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern void TextBoxBase_ScrollToVerticalOffset(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBoxBase_AcceptsReturnProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TextBoxBase_AcceptsTabProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TextBoxBase_CaretBrushProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TextBoxBase_HorizontalScrollBarVisibilityProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TextBoxBase_IsReadOnlyProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TextBoxBase_IsSelectionActiveProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TextBoxBase_PanningModeProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TextBoxBase_SelectionBrushProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TextBoxBase_SelectionOpacityProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TextBoxBase_VerticalScrollBarVisibilityProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TextBoxBase_SelectionChangedEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TextBoxBase_TextChangedEvent_get();

  [DllImport(Library.Name)]
  public static extern void TextBoxBase_AcceptsReturn_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool TextBoxBase_AcceptsReturn_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBoxBase_AcceptsTab_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool TextBoxBase_AcceptsTab_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBoxBase_CaretBrush_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBoxBase_CaretBrush_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBoxBase_HorizontalScrollBarVisibility_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextBoxBase_HorizontalScrollBarVisibility_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBoxBase_IsReadOnly_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool TextBoxBase_IsReadOnly_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool TextBoxBase_IsSelectionActive_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBoxBase_PanningMode_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextBoxBase_PanningMode_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBoxBase_SelectionBrush_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBoxBase_SelectionBrush_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBoxBase_SelectionOpacity_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float TextBoxBase_SelectionOpacity_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBoxBase_VerticalScrollBarVisibility_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextBoxBase_VerticalScrollBarVisibility_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float TextBoxBase_ExtentWidth_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float TextBoxBase_ExtentHeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float TextBoxBase_ViewportWidth_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float TextBoxBase_ViewportHeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float TextBoxBase_HorizontalOffset_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float TextBoxBase_VerticalOffset_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_TriggerActionCollection();

  [DllImport(Library.Name)]
  public static extern IntPtr TriggerBase_EnterActions_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TriggerBase_ExitActions_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_TriggerCollection();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Trigger();

  [DllImport(Library.Name)]
  public static extern void Trigger_Property_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Trigger_Property_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Trigger_Setters_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Trigger_SourceName_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Trigger_SourceName_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Trigger_Value_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Trigger_Value_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_MultiTrigger();

  [DllImport(Library.Name)]
  public static extern IntPtr MultiTrigger_Conditions_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr MultiTrigger_Setters_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_DataTrigger();

  [DllImport(Library.Name)]
  public static extern void DataTrigger_Binding_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr DataTrigger_Binding_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr DataTrigger_Setters_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void DataTrigger_Value_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr DataTrigger_Value_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_MultiDataTrigger();

  [DllImport(Library.Name)]
  public static extern IntPtr MultiDataTrigger_Conditions_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr MultiDataTrigger_Setters_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_EventTrigger();

  [DllImport(Library.Name)]
  public static extern IntPtr EventTrigger_Actions_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void EventTrigger_RoutedEvent_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr EventTrigger_RoutedEvent_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void EventTrigger_SourceName_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr EventTrigger_SourceName_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Binding__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Binding__SWIG_1([MarshalAs(UnmanagedType.LPWStr)]string jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Binding__SWIG_2(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Binding__SWIG_3([MarshalAs(UnmanagedType.LPWStr)]string jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Binding__SWIG_4(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Binding__SWIG_5([MarshalAs(UnmanagedType.LPWStr)]string jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Binding__SWIG_6(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Binding__SWIG_7([MarshalAs(UnmanagedType.LPWStr)]string jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Binding__SWIG_8(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Binding_GetDoNothing();

  [DllImport(Library.Name)]
  public static extern void Binding_ElementName_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Binding_ElementName_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Binding_Source_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Binding_Source_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Binding_RelativeSource_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Binding_RelativeSource_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Binding_Path_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Binding_Path_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Binding_Mode_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Binding_Mode_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Binding_ConverterParameter_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Binding_ConverterParameter_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Binding_UpdateSourceTrigger_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Binding_UpdateSourceTrigger_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Binding_ProvideValueHelper(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr Binding_GetConverterHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Binding_SetConverterHelper(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_MultiBinding();

  [DllImport(Library.Name)]
  public static extern IntPtr MultiBinding_Bindings_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void MultiBinding_ConverterParameter_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr MultiBinding_ConverterParameter_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void MultiBinding_Mode_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int MultiBinding_Mode_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void MultiBinding_UpdateSourceTrigger_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int MultiBinding_UpdateSourceTrigger_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr MultiBinding_ProvideValueHelper(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr MultiBinding_GetConverterHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void MultiBinding_SetConverterHelper(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void BindingOperations_ClearAllBindings(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void BindingOperations_ClearBinding(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr BindingOperations_GetBindingBase(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr BindingOperations_GetBinding(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr BindingOperations_GetBindingExpressionBase(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr BindingOperations_GetBindingExpression(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool BindingOperations_IsDataBound(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr BindingOperations_SetBinding(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Border__SWIG_0(bool jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Border__SWIG_1();

  [DllImport(Library.Name)]
  public static extern IntPtr Border_BackgroundProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Border_BorderBrushProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Border_BorderThicknessProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Border_CornerRadiusProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Border_PaddingProperty_get();

  [DllImport(Library.Name)]
  public static extern void Border_Background_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Border_Background_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Border_BorderBrush_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Border_BorderBrush_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Border_BorderThickness_set(HandleRef jarg1, ref Thickness jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Border_BorderThickness_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Border_CornerRadius_set(HandleRef jarg1, ref CornerRadius jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Border_CornerRadius_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Border_Padding_set(HandleRef jarg1, ref Thickness jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Border_Padding_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_BulletDecorator();

  [DllImport(Library.Name)]
  public static extern IntPtr BulletDecorator_BackgroundProperty_get();

  [DllImport(Library.Name)]
  public static extern void BulletDecorator_Background_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr BulletDecorator_Background_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void BulletDecorator_Bullet_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr BulletDecorator_Bullet_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Button();

  [DllImport(Library.Name)]
  public static extern IntPtr Button_IsCancelProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Button_IsDefaultProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Button_IsDefaultedProperty_get();

  [DllImport(Library.Name)]
  public static extern void Button_IsCancel_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Button_IsCancel_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Button_IsDefault_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Button_IsDefault_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Button_IsDefaulted_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Canvas();

  [DllImport(Library.Name)]
  public static extern float Canvas_GetLeft(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Canvas_SetLeft(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Canvas_GetTop(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Canvas_SetTop(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Canvas_GetRight(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Canvas_SetRight(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Canvas_GetBottom(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Canvas_SetBottom(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Canvas_BottomProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Canvas_LeftProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Canvas_RightProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Canvas_TopProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr new_CheckBox();

  [DllImport(Library.Name)]
  public static extern int CollectionView_IndexOf(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool CollectionView_Contains(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool CollectionView_MoveCurrentTo(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool CollectionView_MoveCurrentToFirst(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool CollectionView_MoveCurrentToLast(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool CollectionView_MoveCurrentToNext(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool CollectionView_MoveCurrentToPosition(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool CollectionView_MoveCurrentToPrevious(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void CollectionView_Refresh(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int CollectionView_Count_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool CollectionView_CanFilter_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool CollectionView_CanGroup_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool CollectionView_CanSort_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr CollectionView_CurrentItem_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int CollectionView_CurrentPosition_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool CollectionView_IsCurrentAfterLast_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool CollectionView_IsCurrentBeforeFirst_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool CollectionView_IsEmpty_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr CollectionView_GetItemAtHelper(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr CollectionView_CreateCollectionView(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr CollectionView_GetSourceCollectionHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_CollectionViewSource();

  [DllImport(Library.Name)]
  public static extern IntPtr CollectionViewSource_CollectionViewTypeProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr CollectionViewSource_SourceProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr CollectionViewSource_ViewProperty_get();

  [DllImport(Library.Name)]
  public static extern void CollectionViewSource_CollectionViewType_set(HandleRef jarg1, IntPtr jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr CollectionViewSource_CollectionViewType_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void CollectionViewSource_Source_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr CollectionViewSource_Source_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr CollectionViewSource_View_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ListBoxItem();

  [DllImport(Library.Name)]
  public static extern IntPtr ListBoxItem_IsSelectedProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ListBoxItem_SelectedEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ListBoxItem_UnselectedEvent_get();

  [DllImport(Library.Name)]
  public static extern void ListBoxItem_IsSelected_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ListBoxItem_IsSelected_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ComboBoxItem();

  [DllImport(Library.Name)]
  public static extern IntPtr ComboBoxItem_IsHighlightedProperty_get();

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ComboBoxItem_IsHighlighted_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ComboBox();

  [DllImport(Library.Name)]
  public static extern void ComboBox_ScrollIntoView(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ComboBox_IsDropDownOpenProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ComboBox_IsEditableProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ComboBox_IsReadOnlyProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ComboBox_MaxDropDownHeightProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ComboBox_PlaceholderProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ComboBox_SelectionBoxItemProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ComboBox_SelectionBoxItemTemplateProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ComboBox_StaysOpenOnEditProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ComboBox_TextProperty_get();

  [DllImport(Library.Name)]
  public static extern void ComboBox_IsDropDownOpen_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ComboBox_IsDropDownOpen_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ComboBox_IsEditable_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ComboBox_IsEditable_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ComboBox_IsReadOnly_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ComboBox_IsReadOnly_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ComboBox_MaxDropDownHeight_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float ComboBox_MaxDropDownHeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ComboBox_SelectionBoxItem_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ComboBox_SelectionBoxItemTemplate_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ComboBox_StaysOpenOnEdit_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ComboBox_StaysOpenOnEdit_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ComboBox_Text_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ComboBox_Text_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ComboBox_Placeholder_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ComboBox_Placeholder_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void CanExecuteRoutedEventArgs_CanExecute_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool CanExecuteRoutedEventArgs_CanExecute_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void CanExecuteRoutedEventArgs_ContinueRouting_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool CanExecuteRoutedEventArgs_ContinueRouting_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr CanExecuteRoutedEventArgs_GetCommandHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr CanExecuteRoutedEventArgs_GetParameterHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void delete_CanExecuteRoutedEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ExecutedRoutedEventArgs_GetCommandHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ExecutedRoutedEventArgs_GetParameterHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void delete_ExecutedRoutedEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_CommandBinding__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_CommandBinding__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_CommandBinding__SWIG_2(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_CommandBinding__SWIG_3(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_CommandBinding__SWIG_4(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr CommandBinding_GetCommandHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void CommandBinding_SetCommandHelper(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_CommandBindingCollection();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Condition();

  [DllImport(Library.Name)]
  public static extern void Condition_Binding_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Condition_Binding_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Condition_Property_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Condition_Property_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Condition_SourceName_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Condition_SourceName_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Condition_Value_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Condition_Value_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ConditionCollection();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ContentPresenter();

  [DllImport(Library.Name)]
  public static extern IntPtr ContentPresenter_ContentProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ContentPresenter_ContentSourceProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ContentPresenter_ContentStringFormatProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ContentPresenter_ContentTemplateProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ContentPresenter_ContentTemplateSelectorProperty_get();

  [DllImport(Library.Name)]
  public static extern void ContentPresenter_Content_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ContentPresenter_Content_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ContentPresenter_ContentSource_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ContentPresenter_ContentSource_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ContentPresenter_ContentStringFormat_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ContentPresenter_ContentStringFormat_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ContentPresenter_ContentTemplate_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ContentPresenter_ContentTemplate_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ContentPresenter_ContentTemplateSelector_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ContentPresenter_ContentTemplateSelector_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ContextMenu();

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenu_HasDropShadowProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenu_HorizontalOffsetProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenu_IsOpenProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenu_PlacementProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenu_PlacementRectangleProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenu_PlacementTargetProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenu_StaysOpenProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenu_VerticalOffsetProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenu_ClosedEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenu_OpenedEvent_get();

  [DllImport(Library.Name)]
  public static extern void ContextMenu_HasDropShadow_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ContextMenu_HasDropShadow_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ContextMenu_HorizontalOffset_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float ContextMenu_HorizontalOffset_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ContextMenu_IsOpen_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ContextMenu_IsOpen_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ContextMenu_Placement_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int ContextMenu_Placement_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ContextMenu_PlacementRectangle_set(HandleRef jarg1, ref Rect jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenu_PlacementRectangle_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ContextMenu_PlacementTarget_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenu_PlacementTarget_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ContextMenu_StaysOpen_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ContextMenu_StaysOpen_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ContextMenu_VerticalOffset_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float ContextMenu_VerticalOffset_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenuService_ContextMenuProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenuService_HasDropShadowProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenuService_HorizontalOffsetProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenuService_IsEnabledProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenuService_PlacementProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenuService_PlacementRectangleProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenuService_PlacementTargetProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenuService_ShowOnDisabledProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenuService_VerticalOffsetProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenuService_ContextMenuClosingEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenuService_ContextMenuOpeningEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenuService_GetContextMenu(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ContextMenuService_SetContextMenu(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ContextMenuService_GetHasDropShadow(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ContextMenuService_SetHasDropShadow(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  public static extern float ContextMenuService_GetHorizontalOffset(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ContextMenuService_SetHorizontalOffset(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ContextMenuService_GetIsEnabled(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ContextMenuService_SetIsEnabled(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  public static extern int ContextMenuService_GetPlacement(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ContextMenuService_SetPlacement(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenuService_GetPlacementRectangle(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ContextMenuService_SetPlacementRectangle(HandleRef jarg1, ref Rect jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenuService_GetPlacementTarget(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ContextMenuService_SetPlacementTarget(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ContextMenuService_GetShowOnDisabled(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ContextMenuService_SetShowOnDisabled(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  public static extern float ContextMenuService_GetVerticalOffset(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ContextMenuService_SetVerticalOffset(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_DashStyle();

  [DllImport(Library.Name)]
  public static extern IntPtr DashStyle_DashesProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr DashStyle_OffsetProperty_get();

  [DllImport(Library.Name)]
  public static extern void DashStyle_Dashes_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr DashStyle_Dashes_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void DashStyle_Offset_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float DashStyle_Offset_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_DockPanel();

  [DllImport(Library.Name)]
  public static extern int DockPanel_GetDock(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void DockPanel_SetDock(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr DockPanel_DockProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr DockPanel_LastChildFillProperty_get();

  [DllImport(Library.Name)]
  public static extern void DockPanel_LastChildFill_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool DockPanel_LastChildFill_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Shape_FillProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Shape_StretchProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Shape_StrokeProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Shape_StrokeDashArrayProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Shape_StrokeDashCapProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Shape_StrokeDashOffsetProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Shape_StrokeEndLineCapProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Shape_StrokeLineJoinProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Shape_StrokeMiterLimitProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Shape_StrokeStartLineCapProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Shape_StrokeThicknessProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Shape_TrimStartProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Shape_TrimEndProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Shape_TrimOffsetProperty_get();

  [DllImport(Library.Name)]
  public static extern void Shape_Fill_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Shape_Fill_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Shape_Stretch_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Shape_Stretch_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Shape_Stroke_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Shape_Stroke_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Shape_StrokeDashArray_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Shape_StrokeDashArray_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Shape_StrokeDashCap_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Shape_StrokeDashCap_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Shape_StrokeDashOffset_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Shape_StrokeDashOffset_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Shape_StrokeEndLineCap_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Shape_StrokeEndLineCap_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Shape_StrokeLineJoin_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Shape_StrokeLineJoin_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Shape_StrokeMiterLimit_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Shape_StrokeMiterLimit_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Shape_StrokeStartLineCap_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Shape_StrokeStartLineCap_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Shape_StrokeThickness_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Shape_StrokeThickness_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Shape_TrimStart_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Shape_TrimStart_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Shape_TrimEnd_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Shape_TrimEnd_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Shape_TrimOffset_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Shape_TrimOffset_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Rectangle();

  [DllImport(Library.Name)]
  public static extern IntPtr Rectangle_RadiusXProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Rectangle_RadiusYProperty_get();

  [DllImport(Library.Name)]
  public static extern void Rectangle_RadiusX_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Rectangle_RadiusX_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Rectangle_RadiusY_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Rectangle_RadiusY_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Ellipse();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Line();

  [DllImport(Library.Name)]
  public static extern IntPtr Line_X1Property_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Line_Y1Property_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Line_X2Property_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Line_Y2Property_get();

  [DllImport(Library.Name)]
  public static extern void Line_X1_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Line_X1_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Line_Y1_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Line_Y1_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Line_X2_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Line_X2_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Line_Y2_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Line_Y2_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Path();

  [DllImport(Library.Name)]
  public static extern IntPtr Path_DataProperty_get();

  [DllImport(Library.Name)]
  public static extern void Path_Data_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Path_Data_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_HeaderedContentControl();

  [DllImport(Library.Name)]
  public static extern IntPtr HeaderedContentControl_HasHeaderProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr HeaderedContentControl_HeaderProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr HeaderedContentControl_HeaderStringFormatProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr HeaderedContentControl_HeaderTemplateProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr HeaderedContentControl_HeaderTemplateSelectorProperty_get();

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool HeaderedContentControl_HasHeader_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void HeaderedContentControl_Header_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr HeaderedContentControl_Header_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void HeaderedContentControl_HeaderStringFormat_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr HeaderedContentControl_HeaderStringFormat_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void HeaderedContentControl_HeaderTemplate_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr HeaderedContentControl_HeaderTemplate_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void HeaderedContentControl_HeaderTemplateSelector_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr HeaderedContentControl_HeaderTemplateSelector_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Expander();

  [DllImport(Library.Name)]
  public static extern IntPtr Expander_ExpandDirectionProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Expander_IsExpandedProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Expander_CollapsedEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Expander_ExpandedEvent_get();

  [DllImport(Library.Name)]
  public static extern void Expander_ExpandDirection_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Expander_ExpandDirection_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Expander_IsExpanded_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Expander_IsExpanded_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_FormattedText__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_FormattedText__SWIG_1([MarshalAs(UnmanagedType.LPWStr)]string jarg1, HandleRef jarg2, float jarg3, HandleRef jarg4, int jarg5, float jarg6, float jarg7, float jarg8, int jarg9, int jarg10);

  [DllImport(Library.Name)]
  public static extern IntPtr new_FormattedText__SWIG_2([MarshalAs(UnmanagedType.LPWStr)]string jarg1, HandleRef jarg2, float jarg3, HandleRef jarg4, int jarg5, float jarg6, float jarg7, float jarg8, int jarg9);

  [DllImport(Library.Name)]
  public static extern IntPtr new_FormattedText__SWIG_3([MarshalAs(UnmanagedType.LPWStr)]string jarg1, HandleRef jarg2, float jarg3, HandleRef jarg4, int jarg5, float jarg6, float jarg7, float jarg8);

  [DllImport(Library.Name)]
  public static extern IntPtr new_FormattedText__SWIG_4([MarshalAs(UnmanagedType.LPWStr)]string jarg1, HandleRef jarg2, float jarg3, HandleRef jarg4, int jarg5, float jarg6, float jarg7);

  [DllImport(Library.Name)]
  public static extern IntPtr new_FormattedText__SWIG_5([MarshalAs(UnmanagedType.LPWStr)]string jarg1, HandleRef jarg2, float jarg3, HandleRef jarg4, int jarg5, float jarg6);

  [DllImport(Library.Name)]
  public static extern IntPtr new_FormattedText__SWIG_6([MarshalAs(UnmanagedType.LPWStr)]string jarg1, HandleRef jarg2, float jarg3, HandleRef jarg4, int jarg5);

  [DllImport(Library.Name)]
  public static extern IntPtr new_FormattedText__SWIG_7([MarshalAs(UnmanagedType.LPWStr)]string jarg1, HandleRef jarg2, float jarg3, HandleRef jarg4);

  [DllImport(Library.Name)]
  public static extern IntPtr new_FormattedText__SWIG_8([MarshalAs(UnmanagedType.LPWStr)]string jarg1, HandleRef jarg2, int jarg3, int jarg4, int jarg5, float jarg6, HandleRef jarg7, int jarg8, float jarg9, float jarg10, float jarg11, int jarg12, int jarg13);

  [DllImport(Library.Name)]
  public static extern IntPtr new_FormattedText__SWIG_9([MarshalAs(UnmanagedType.LPWStr)]string jarg1, HandleRef jarg2, int jarg3, int jarg4, int jarg5, float jarg6, HandleRef jarg7, int jarg8, float jarg9, float jarg10, float jarg11, int jarg12);

  [DllImport(Library.Name)]
  public static extern IntPtr new_FormattedText__SWIG_10([MarshalAs(UnmanagedType.LPWStr)]string jarg1, HandleRef jarg2, int jarg3, int jarg4, int jarg5, float jarg6, HandleRef jarg7, int jarg8, float jarg9, float jarg10, float jarg11);

  [DllImport(Library.Name)]
  public static extern IntPtr new_FormattedText__SWIG_11([MarshalAs(UnmanagedType.LPWStr)]string jarg1, HandleRef jarg2, int jarg3, int jarg4, int jarg5, float jarg6, HandleRef jarg7, int jarg8, float jarg9, float jarg10);

  [DllImport(Library.Name)]
  public static extern IntPtr new_FormattedText__SWIG_12([MarshalAs(UnmanagedType.LPWStr)]string jarg1, HandleRef jarg2, int jarg3, int jarg4, int jarg5, float jarg6, HandleRef jarg7, int jarg8, float jarg9);

  [DllImport(Library.Name)]
  public static extern IntPtr new_FormattedText__SWIG_13([MarshalAs(UnmanagedType.LPWStr)]string jarg1, HandleRef jarg2, int jarg3, int jarg4, int jarg5, float jarg6, HandleRef jarg7, int jarg8);

  [DllImport(Library.Name)]
  public static extern IntPtr new_FormattedText__SWIG_14([MarshalAs(UnmanagedType.LPWStr)]string jarg1, HandleRef jarg2, int jarg3, int jarg4, int jarg5, float jarg6, HandleRef jarg7);

  [DllImport(Library.Name)]
  public static extern void FormattedText_BuildTextRuns(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2, HandleRef jarg3, HandleRef jarg4, int jarg5, int jarg6, int jarg7, float jarg8, float jarg9, HandleRef jarg10, HandleRef jarg11, HandleRef jarg12, int jarg13, int jarg14, int jarg15);

  [DllImport(Library.Name)]
  public static extern IntPtr FormattedText_Measure(HandleRef jarg1, int jarg2, int jarg3, int jarg4, float jarg5, float jarg6, float jarg7, int jarg8, int jarg9);

  [DllImport(Library.Name)]
  public static extern void FormattedText_Layout(HandleRef jarg1, int jarg2, int jarg3, int jarg4, float jarg5, float jarg6, ref Thickness jarg7, float jarg8, int jarg9, int jarg10, bool jarg11);

  [DllImport(Library.Name)]
  public static extern void FormattedText_GetGlyphPosition(HandleRef jarg1, uint jarg2, bool jarg3, ref float jarg4, ref float jarg5);

  [DllImport(Library.Name)]
  public static extern uint FormattedText_HitTest(HandleRef jarg1, float jarg2, float jarg3, ref bool jarg4, ref bool jarg5);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool FormattedText_IsInitialized(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FormattedText_Init(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool FormattedText_IsEmpty_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern uint FormattedText_NumLines_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FormattedText_GetBoundsHelper(HandleRef jarg1, ref Rect jarg2);

  [DllImport(Library.Name)]
  public static extern void FormattedText_GetLineInfoHelper(HandleRef jarg1, uint jarg2, ref uint jarg3, ref float jarg4, ref float jarg5);

  [DllImport(Library.Name)]
  public static extern IntPtr GridLength_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_GridLength_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Unbox_GridLength(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_GridLength(ref GridLength jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool GridLength_TryParse([MarshalAs(UnmanagedType.LPWStr)]string jarg1, out GridLength jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_DefinitionBase();

  [DllImport(Library.Name)]
  public static extern IntPtr DefinitionBase_SharedSizeGroupProperty_get();

  [DllImport(Library.Name)]
  public static extern void DefinitionBase_SharedSizeGroup_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr DefinitionBase_SharedSizeGroup_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ColumnDefinition();

  [DllImport(Library.Name)]
  public static extern IntPtr ColumnDefinition_WidthProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ColumnDefinition_MinWidthProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ColumnDefinition_MaxWidthProperty_get();

  [DllImport(Library.Name)]
  public static extern void ColumnDefinition_Width_set(HandleRef jarg1, ref GridLength jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ColumnDefinition_Width_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ColumnDefinition_MinWidth_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float ColumnDefinition_MinWidth_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ColumnDefinition_MaxWidth_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float ColumnDefinition_MaxWidth_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ColumnDefinition_ActualWidth_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ColumnDefinitionCollection();

  [DllImport(Library.Name)]
  public static extern IntPtr new_RowDefinition();

  [DllImport(Library.Name)]
  public static extern IntPtr RowDefinition_HeightProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr RowDefinition_MinHeightProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr RowDefinition_MaxHeightProperty_get();

  [DllImport(Library.Name)]
  public static extern void RowDefinition_Height_set(HandleRef jarg1, ref GridLength jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr RowDefinition_Height_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RowDefinition_MaxHeight_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float RowDefinition_MaxHeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RowDefinition_MinHeight_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float RowDefinition_MinHeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float RowDefinition_ActualHeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_RowDefinitionCollection();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Grid();

  [DllImport(Library.Name)]
  public static extern int Grid_GetColumn(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Grid_SetColumn(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Grid_GetColumnSpan(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Grid_SetColumnSpan(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Grid_GetIsSharedSizeScope(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Grid_SetIsSharedSizeScope(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  public static extern int Grid_GetRow(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Grid_SetRow(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Grid_GetRowSpan(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Grid_SetRowSpan(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Grid_ColumnProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Grid_ColumnSpanProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Grid_IsSharedSizeScopeProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Grid_RowProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Grid_RowSpanProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Grid_ColumnDefinitions_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Grid_RowDefinitions_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_UniformGrid();

  [DllImport(Library.Name)]
  public static extern IntPtr UniformGrid_FirstColumnProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UniformGrid_ColumnsProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr UniformGrid_RowsProperty_get();

  [DllImport(Library.Name)]
  public static extern void UniformGrid_FirstColumn_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int UniformGrid_FirstColumn_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void UniformGrid_Columns_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int UniformGrid_Columns_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void UniformGrid_Rows_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int UniformGrid_Rows_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_GroupBox();

  [DllImport(Library.Name)]
  public static extern IntPtr new_HeaderedItemsControl();

  [DllImport(Library.Name)]
  public static extern IntPtr HeaderedItemsControl_HasHeaderProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr HeaderedItemsControl_HeaderProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr HeaderedItemsControl_HeaderStringFormatProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr HeaderedItemsControl_HeaderTemplateProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr HeaderedItemsControl_HeaderTemplateSelectorProperty_get();

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool HeaderedItemsControl_HasHeader_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void HeaderedItemsControl_Header_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr HeaderedItemsControl_Header_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void HeaderedItemsControl_HeaderStringFormat_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr HeaderedItemsControl_HeaderStringFormat_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void HeaderedItemsControl_HeaderTemplate_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr HeaderedItemsControl_HeaderTemplate_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void HeaderedItemsControl_HeaderTemplateSelector_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr HeaderedItemsControl_HeaderTemplateSelector_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Image();

  [DllImport(Library.Name)]
  public static extern IntPtr Image_SourceProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Image_StretchProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Image_StretchDirectionProperty_get();

  [DllImport(Library.Name)]
  public static extern void Image_Source_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Image_Source_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Image_Stretch_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Image_Stretch_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Image_StretchDirection_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Image_StretchDirection_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool InputGesture_Matches(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr new_InputGestureCollection();

  [DllImport(Library.Name)]
  public static extern IntPtr new_KeyGesture__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_KeyGesture__SWIG_1(int jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_KeyGesture__SWIG_2(int jarg1);

  [DllImport(Library.Name)]
  public static extern int KeyGesture_Key_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int KeyGesture_Modifiers_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr KeyGesture_DisplayString_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_MouseGesture__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_MouseGesture__SWIG_1(int jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_MouseGesture__SWIG_2(int jarg1);

  [DllImport(Library.Name)]
  public static extern int MouseGesture_MouseAction_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int MouseGesture_Modifiers_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_InputBinding__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_InputBinding__SWIG_1(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr InputBinding_CommandProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr InputBinding_CommandParameterProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr InputBinding_CommandTargetProperty_get();

  [DllImport(Library.Name)]
  public static extern void InputBinding_CommandParameter_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr InputBinding_CommandParameter_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void InputBinding_CommandTarget_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr InputBinding_CommandTarget_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void InputBinding_Gesture_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr InputBinding_Gesture_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr InputBinding_CreateInputBinding(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr InputBinding_GetCommandHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void InputBinding_SetCommandHelper(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_InputBindingCollection();

  [DllImport(Library.Name)]
  public static extern IntPtr new_KeyBinding();

  [DllImport(Library.Name)]
  public static extern IntPtr KeyBinding_KeyProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr KeyBinding_ModifiersProperty_get();

  [DllImport(Library.Name)]
  public static extern void KeyBinding_Key_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int KeyBinding_Key_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void KeyBinding_Modifiers_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int KeyBinding_Modifiers_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr KeyBinding_CreateKeyBinding(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern uint KeyBinding_ParseKeyHelper([MarshalAs(UnmanagedType.LPWStr)]string jarg1);

  [DllImport(Library.Name)]
  public static extern uint KeyBinding_ParseModifierKeysHelper([MarshalAs(UnmanagedType.LPWStr)]string jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr KeyBinding_ParseKeyGestureHelper([MarshalAs(UnmanagedType.LPWStr)]string jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_MouseBinding();

  [DllImport(Library.Name)]
  public static extern IntPtr MouseBinding_MouseActionProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr MouseBinding_ModifiersProperty_get();

  [DllImport(Library.Name)]
  public static extern void MouseBinding_MouseAction_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int MouseBinding_MouseAction_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void MouseBinding_Modifiers_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int MouseBinding_Modifiers_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr MouseBinding_CreateMouseBinding(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern uint MouseBinding_ParseMouseActionHelper([MarshalAs(UnmanagedType.LPWStr)]string jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr MouseBinding_ParseMouseGestureHelper([MarshalAs(UnmanagedType.LPWStr)]string jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_KeyboardNavigation__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_KeyboardNavigation__SWIG_1(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern int KeyboardNavigation_GetTabNavigation(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void KeyboardNavigation_SetTabNavigation(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int KeyboardNavigation_GetControlTabNavigation(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void KeyboardNavigation_SetControlTabNavigation(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int KeyboardNavigation_GetDirectionalNavigation(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void KeyboardNavigation_SetDirectionalNavigation(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool KeyboardNavigation_GetAcceptsReturn(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void KeyboardNavigation_SetAcceptsReturn(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool KeyboardNavigation_GetIsTabStop(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void KeyboardNavigation_SetIsTabStop(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  public static extern int KeyboardNavigation_GetTabIndex(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void KeyboardNavigation_SetTabIndex(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool KeyboardNavigation_MoveFocus(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr KeyboardNavigation_PredictFocus(HandleRef jarg1, HandleRef jarg2, int jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr KeyboardNavigation_AcceptsReturnProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr KeyboardNavigation_ControlTabNavigationProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr KeyboardNavigation_DirectionalNavigationProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr KeyboardNavigation_IsTabStopProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr KeyboardNavigation_TabIndexProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr KeyboardNavigation_TabNavigationProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Label();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ListBox();

  [DllImport(Library.Name)]
  public static extern void ListBox_SelectAll(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ListBox_UnselectAll(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ListBox_ScrollIntoView(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ListBox_SelectedItemsProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ListBox_SelectionModeProperty_get();

  [DllImport(Library.Name)]
  public static extern void ListBox_SelectionMode_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int ListBox_SelectionMode_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ListBox_GetSelectedItemsHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Menu();

  [DllImport(Library.Name)]
  public static extern IntPtr Menu_IsMainMenuProperty_get();

  [DllImport(Library.Name)]
  public static extern void Menu_IsMainMenu_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Menu_IsMainMenu_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_MenuItem();

  [DllImport(Library.Name)]
  public static extern IntPtr MenuItem_CommandParameterProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr MenuItem_CommandProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr MenuItem_CommandTargetProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr MenuItem_IconProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr MenuItem_InputGestureTextProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr MenuItem_IsCheckableProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr MenuItem_IsCheckedProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr MenuItem_IsHighlightedProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr MenuItem_IsPressedProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr MenuItem_IsSubmenuOpenProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr MenuItem_RoleProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr MenuItem_StaysOpenOnClickProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr MenuItem_SeparatorStyleKey_get();

  [DllImport(Library.Name)]
  public static extern IntPtr MenuItem_CheckedEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr MenuItem_ClickEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr MenuItem_SubmenuClosedEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr MenuItem_SubmenuOpenedEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr MenuItem_UncheckedEvent_get();

  [DllImport(Library.Name)]
  public static extern void MenuItem_CommandParameter_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr MenuItem_CommandParameter_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void MenuItem_CommandTarget_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr MenuItem_CommandTarget_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void MenuItem_Icon_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr MenuItem_Icon_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void MenuItem_InputGestureText_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr MenuItem_InputGestureText_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void MenuItem_IsCheckable_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool MenuItem_IsCheckable_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void MenuItem_IsChecked_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool MenuItem_IsChecked_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool MenuItem_IsHighlighted_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool MenuItem_IsPressed_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void MenuItem_IsSubmenuOpen_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool MenuItem_IsSubmenuOpen_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int MenuItem_Role_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void MenuItem_StaysOpenOnClick_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool MenuItem_StaysOpenOnClick_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr MenuItem_GetCommandHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void MenuItem_SetCommandHelper(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_NameScope();

  [DllImport(Library.Name)]
  public static extern IntPtr NameScope_GetNameScope(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void NameScope_SetNameScope(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr NameScope_FindName(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern void NameScope_RegisterName(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern void NameScope_UnregisterName(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern void NameScope_UpdateName(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr NameScope_NameScopeProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Page();

  [DllImport(Library.Name)]
  public static extern void Page_Title_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Page_Title_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_PasswordBox();

  [DllImport(Library.Name)]
  public static extern void PasswordBox_SelectAll(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void PasswordBox_HideCaret(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PasswordBox_CaretBrushProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr PasswordBox_MaxLengthProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr PasswordBox_PasswordCharProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr PasswordBox_PlaceholderProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr PasswordBox_SelectionBrushProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr PasswordBox_SelectionOpacityProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr PasswordBox_ShowLastCharacterDurationProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr PasswordBox_PasswordChangedEvent_get();

  [DllImport(Library.Name)]
  public static extern void PasswordBox_CaretBrush_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr PasswordBox_CaretBrush_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void PasswordBox_MaxLength_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int PasswordBox_MaxLength_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void PasswordBox_PasswordChar_set(HandleRef jarg1, uint jarg2);

  [DllImport(Library.Name)]
  public static extern uint PasswordBox_PasswordChar_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void PasswordBox_Password_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr PasswordBox_Password_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void PasswordBox_SelectionBrush_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr PasswordBox_SelectionBrush_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void PasswordBox_SelectionOpacity_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float PasswordBox_SelectionOpacity_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void PasswordBox_Placeholder_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr PasswordBox_Placeholder_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void PasswordBox_ShowLastCharacterDuration_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int PasswordBox_ShowLastCharacterDuration_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Popup();

  [DllImport(Library.Name)]
  public static extern IntPtr Popup_AllowsTransparencyProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Popup_ChildProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Popup_HasDropShadowProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Popup_HorizontalOffsetProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Popup_IsOpenProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Popup_PlacementProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Popup_PlacementRectangleProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Popup_PlacementTargetProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Popup_PopupAnimationProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Popup_StaysOpenProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Popup_VerticalOffsetProperty_get();

  [DllImport(Library.Name)]
  public static extern void Popup_AllowsTransparency_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Popup_AllowsTransparency_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Popup_Child_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Popup_Child_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Popup_HasDropShadow_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Popup_HasDropShadow_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Popup_HorizontalOffset_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Popup_HorizontalOffset_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Popup_IsOpen_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Popup_IsOpen_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Popup_Placement_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Popup_Placement_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Popup_PlacementRectangle_set(HandleRef jarg1, ref Rect jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Popup_PlacementRectangle_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Popup_PlacementTarget_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Popup_PlacementTarget_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Popup_PopupAnimation_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Popup_PopupAnimation_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Popup_StaysOpen_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Popup_StaysOpen_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Popup_VerticalOffset_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Popup_VerticalOffset_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RangeBase_LargeChangeProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr RangeBase_MaximumProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr RangeBase_MinimumProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr RangeBase_SmallChangeProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr RangeBase_ValueProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr RangeBase_ValueChangedEvent_get();

  [DllImport(Library.Name)]
  public static extern void RangeBase_LargeChange_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float RangeBase_LargeChange_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RangeBase_Maximum_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float RangeBase_Maximum_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RangeBase_Minimum_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float RangeBase_Minimum_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RangeBase_SmallChange_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float RangeBase_SmallChange_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RangeBase_Value_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float RangeBase_Value_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ProgressBar();

  [DllImport(Library.Name)]
  public static extern IntPtr ProgressBar_IsIndeterminateProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ProgressBar_OrientationProperty_get();

  [DllImport(Library.Name)]
  public static extern void ProgressBar_IsIndeterminate_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ProgressBar_IsIndeterminate_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ProgressBar_Orientation_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int ProgressBar_Orientation_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_PropertyPath__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_PropertyPath__SWIG_1([MarshalAs(UnmanagedType.LPWStr)]string jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_PropertyPath__SWIG_2(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void PropertyPath_Path_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr PropertyPath_Path_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollEventArgs_NewValue_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int ScrollEventArgs_ScrollEventType_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ScrollEventArgs(HandleRef jarg1, float jarg2, int jarg3);

  [DllImport(Library.Name)]
  public static extern void delete_ScrollEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ScrollBar();

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_OrientationProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_ViewportSizeProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_ScrollEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_DeferScrollToHorizontalOffsetCommand_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_DeferScrollToVerticalOffsetCommand_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_LineDownCommand_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_LineLeftCommand_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_LineRightCommand_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_LineUpCommand_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_PageDownCommand_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_PageLeftCommand_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_PageRightCommand_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_PageUpCommand_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_ScrollHereCommand_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_ScrollToBottomCommand_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_ScrollToEndCommand_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_ScrollToHomeCommand_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_ScrollToHorizontalOffsetCommand_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_ScrollToLeftEndCommand_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_ScrollToRightEndCommand_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_ScrollToTopCommand_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_ScrollToVerticalOffsetCommand_get();

  [DllImport(Library.Name)]
  public static extern void ScrollBar_Orientation_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int ScrollBar_Orientation_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollBar_ViewportSize_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float ScrollBar_ViewportSize_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_Track_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ScrollContentPresenter();

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollContentPresenter_GetAdornerLayer(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollContentPresenter_LineLeft(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollContentPresenter_LineRight(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollContentPresenter_LineUp(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollContentPresenter_LineDown(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollContentPresenter_PageLeft(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollContentPresenter_PageRight(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollContentPresenter_PageUp(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollContentPresenter_PageDown(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollContentPresenter_MouseWheelLeft__SWIG_0(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern void ScrollContentPresenter_MouseWheelLeft__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollContentPresenter_MouseWheelRight__SWIG_0(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern void ScrollContentPresenter_MouseWheelRight__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollContentPresenter_MouseWheelUp__SWIG_0(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern void ScrollContentPresenter_MouseWheelUp__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollContentPresenter_MouseWheelDown__SWIG_0(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern void ScrollContentPresenter_MouseWheelDown__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollContentPresenter_SetHorizontalOffset(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern void ScrollContentPresenter_SetVerticalOffset(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollContentPresenter_MakeVisible(HandleRef jarg1, HandleRef jarg2, ref Rect jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollContentPresenter_CanContentScrollProperty_get();

  [DllImport(Library.Name)]
  public static extern void ScrollContentPresenter_CanContentScroll_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ScrollContentPresenter_CanContentScroll_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollContentPresenter_CanHorizontallyScroll_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ScrollContentPresenter_CanHorizontallyScroll_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollContentPresenter_CanVerticallyScroll_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ScrollContentPresenter_CanVerticallyScroll_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollContentPresenter_ExtentWidth_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollContentPresenter_ExtentHeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollContentPresenter_ViewportWidth_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollContentPresenter_ViewportHeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollContentPresenter_HorizontalOffset_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollContentPresenter_VerticalOffset_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollContentPresenter_ScrollOwner_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollContentPresenter_ScrollOwner_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_PanningMode(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_PanningMode(int jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollChangedEventArgs_ExtentHeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollChangedEventArgs_ExtentHeightChange_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollChangedEventArgs_ExtentWidth_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollChangedEventArgs_ExtentWidthChange_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollChangedEventArgs_HorizontalChange_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollChangedEventArgs_HorizontalOffset_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollChangedEventArgs_VerticalChange_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollChangedEventArgs_VerticalOffset_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollChangedEventArgs_ViewportHeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollChangedEventArgs_ViewportHeightChange_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollChangedEventArgs_ViewportWidth_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollChangedEventArgs_ViewportWidthChange_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ScrollChangedEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void delete_ScrollChangedEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ScrollViewer();

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ScrollViewer_GetCanContentScroll(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_SetCanContentScroll(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  public static extern int ScrollViewer_GetHorizontalScrollBarVisibility(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_SetHorizontalScrollBarVisibility(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int ScrollViewer_GetVerticalScrollBarVisibility(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_SetVerticalScrollBarVisibility(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ScrollViewer_GetIsDeferredScrollingEnabled(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_SetIsDeferredScrollingEnabled(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  public static extern int ScrollViewer_GetPanningMode(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_SetPanningMode(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern float ScrollViewer_GetPanningDeceleration(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_SetPanningDeceleration(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float ScrollViewer_GetPanningRatio(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_SetPanningRatio(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_LineLeft(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_LineRight(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_LineUp(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_LineDown(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_PageLeft(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_PageRight(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_PageUp(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_PageDown(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_ScrollToLeftEnd(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_ScrollToRightEnd(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_ScrollToTop(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_ScrollToBottom(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_ScrollToHome(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_ScrollToEnd(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_ScrollToHorizontalOffset(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_ScrollToVerticalOffset(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_InvalidateScrollInfo(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollViewer_CanContentScrollProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollViewer_ComputedHorizontalScrollBarVisibilityProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollViewer_ComputedVerticalScrollBarVisibilityProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollViewer_ExtentHeightProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollViewer_ExtentWidthProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollViewer_HorizontalOffsetProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollViewer_HorizontalScrollBarVisibilityProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollViewer_IsDeferredScrollingEnabledProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollViewer_ScrollableHeightProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollViewer_ScrollableWidthProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollViewer_VerticalOffsetProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollViewer_VerticalScrollBarVisibilityProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollViewer_ViewportHeightProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollViewer_ViewportWidthProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollViewer_PanningModeProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollViewer_PanningDecelerationProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollViewer_PanningRatioProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollViewer_ScrollChangedEvent_get();

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_CanContentScroll_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ScrollViewer_CanContentScroll_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_HorizontalScrollBarVisibility_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int ScrollViewer_HorizontalScrollBarVisibility_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_VerticalScrollBarVisibility_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int ScrollViewer_VerticalScrollBarVisibility_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_IsDeferredScrollingEnabled_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ScrollViewer_IsDeferredScrollingEnabled_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_PanningMode_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int ScrollViewer_PanningMode_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_PanningDeceleration_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float ScrollViewer_PanningDeceleration_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_PanningRatio_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float ScrollViewer_PanningRatio_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int ScrollViewer_ComputedHorizontalScrollBarVisibility_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int ScrollViewer_ComputedVerticalScrollBarVisibility_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollViewer_ExtentWidth_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollViewer_ExtentHeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollViewer_HorizontalOffset_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollViewer_VerticalOffset_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollViewer_ScrollableWidth_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollViewer_ScrollableHeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollViewer_ViewportWidth_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollViewer_ViewportHeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Separator();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Setter();

  [DllImport(Library.Name)]
  public static extern void Setter_TargetName_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Setter_TargetName_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Setter_Property_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Setter_Property_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Setter_Value_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Setter_Value_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Slider();

  [DllImport(Library.Name)]
  public static extern IntPtr Slider_DelayProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Slider_IntervalProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Slider_IsDirectionReversedProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Slider_IsMoveToPointEnabledProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Slider_IsSelectionRangeEnabledProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Slider_IsSnapToTickEnabledProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Slider_OrientationProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Slider_SelectionEndProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Slider_SelectionStartProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Slider_TickFrequencyProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Slider_TickPlacementProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Slider_TicksProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Slider_DecreaseLargeCommand_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Slider_DecreaseSmallCommand_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Slider_IncreaseLargeCommand_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Slider_IncreaseSmallCommand_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Slider_MaximizeValueCommand_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Slider_MinimizeValueCommand_get();

  [DllImport(Library.Name)]
  public static extern void Slider_Delay_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Slider_Delay_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Slider_Interval_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Slider_Interval_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Slider_IsDirectionReversed_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Slider_IsDirectionReversed_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Slider_IsMoveToPointEnabled_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Slider_IsMoveToPointEnabled_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Slider_IsSelectionRangeEnabled_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Slider_IsSelectionRangeEnabled_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Slider_IsSnapToTickEnabled_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Slider_IsSnapToTickEnabled_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Slider_Orientation_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Slider_Orientation_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Slider_SelectionStart_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Slider_SelectionStart_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Slider_SelectionEnd_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Slider_SelectionEnd_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Slider_TickFrequency_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Slider_TickFrequency_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Slider_TickPlacement_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Slider_TickPlacement_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Slider_Ticks_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Slider_Ticks_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_StackPanel();

  [DllImport(Library.Name)]
  public static extern void StackPanel_LineLeft(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void StackPanel_LineRight(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void StackPanel_LineUp(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void StackPanel_LineDown(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void StackPanel_PageLeft(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void StackPanel_PageRight(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void StackPanel_PageUp(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void StackPanel_PageDown(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void StackPanel_MouseWheelLeft__SWIG_0(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern void StackPanel_MouseWheelLeft__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void StackPanel_MouseWheelRight__SWIG_0(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern void StackPanel_MouseWheelRight__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void StackPanel_MouseWheelUp__SWIG_0(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern void StackPanel_MouseWheelUp__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void StackPanel_MouseWheelDown__SWIG_0(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern void StackPanel_MouseWheelDown__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void StackPanel_SetHorizontalOffset(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern void StackPanel_SetVerticalOffset(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr StackPanel_MakeVisible(HandleRef jarg1, HandleRef jarg2, ref Rect jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr StackPanel_OrientationProperty_get();

  [DllImport(Library.Name)]
  public static extern void StackPanel_Orientation_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int StackPanel_Orientation_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void StackPanel_CanHorizontallyScroll_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool StackPanel_CanHorizontallyScroll_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void StackPanel_CanVerticallyScroll_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool StackPanel_CanVerticallyScroll_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float StackPanel_ExtentWidth_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float StackPanel_ExtentHeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float StackPanel_ViewportWidth_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float StackPanel_ViewportHeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float StackPanel_HorizontalOffset_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float StackPanel_VerticalOffset_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void StackPanel_ScrollOwner_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr StackPanel_ScrollOwner_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VirtualizationCacheLength_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_VirtualizationCacheLength_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Unbox_VirtualizationCacheLength(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_VirtualizationCacheLength(ref VirtualizationCacheLength jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_VirtualizationCacheLengthUnit(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_VirtualizationCacheLengthUnit(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_VirtualizationMode(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_VirtualizationMode(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_ScrollUnit(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_ScrollUnit(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VirtualizingPanel_GetCacheLength(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VirtualizingPanel_SetCacheLength(HandleRef jarg1, ref VirtualizationCacheLength jarg2);

  [DllImport(Library.Name)]
  public static extern int VirtualizingPanel_GetCacheLengthUnit(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VirtualizingPanel_SetCacheLengthUnit(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool VirtualizingPanel_GetIsContainerVirtualizable(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VirtualizingPanel_SetIsContainerVirtualizable(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool VirtualizingPanel_GetIsVirtualizing(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VirtualizingPanel_SetIsVirtualizing(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  public static extern int VirtualizingPanel_GetScrollUnit(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VirtualizingPanel_SetScrollUnit(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int VirtualizingPanel_GetVirtualizationMode(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VirtualizingPanel_SetVirtualizationMode(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr VirtualizingPanel_CacheLengthProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr VirtualizingPanel_CacheLengthUnitProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr VirtualizingPanel_IsContainerVirtualizableProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr VirtualizingPanel_IsVirtualizingProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr VirtualizingPanel_ScrollUnitProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr VirtualizingPanel_VirtualizationModeProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr VirtualizingPanel_GetGeneratorHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_VirtualizingStackPanel();

  [DllImport(Library.Name)]
  public static extern void VirtualizingStackPanel_LineLeft(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VirtualizingStackPanel_LineRight(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VirtualizingStackPanel_LineUp(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VirtualizingStackPanel_LineDown(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VirtualizingStackPanel_PageLeft(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VirtualizingStackPanel_PageRight(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VirtualizingStackPanel_PageUp(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VirtualizingStackPanel_PageDown(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VirtualizingStackPanel_MouseWheelLeft__SWIG_0(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern void VirtualizingStackPanel_MouseWheelLeft__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VirtualizingStackPanel_MouseWheelRight__SWIG_0(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern void VirtualizingStackPanel_MouseWheelRight__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VirtualizingStackPanel_MouseWheelUp__SWIG_0(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern void VirtualizingStackPanel_MouseWheelUp__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VirtualizingStackPanel_MouseWheelDown__SWIG_0(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern void VirtualizingStackPanel_MouseWheelDown__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VirtualizingStackPanel_SetHorizontalOffset(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern void VirtualizingStackPanel_SetVerticalOffset(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr VirtualizingStackPanel_MakeVisible(HandleRef jarg1, HandleRef jarg2, ref Rect jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr VirtualizingStackPanel_OrientationProperty_get();

  [DllImport(Library.Name)]
  public static extern void VirtualizingStackPanel_Orientation_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int VirtualizingStackPanel_Orientation_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VirtualizingStackPanel_CanHorizontallyScroll_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool VirtualizingStackPanel_CanHorizontallyScroll_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VirtualizingStackPanel_CanVerticallyScroll_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool VirtualizingStackPanel_CanVerticallyScroll_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float VirtualizingStackPanel_ExtentWidth_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float VirtualizingStackPanel_ExtentHeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float VirtualizingStackPanel_ViewportWidth_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float VirtualizingStackPanel_ViewportHeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float VirtualizingStackPanel_HorizontalOffset_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float VirtualizingStackPanel_VerticalOffset_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VirtualizingStackPanel_ScrollOwner_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr VirtualizingStackPanel_ScrollOwner_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_StatusBar();

  [DllImport(Library.Name)]
  public static extern IntPtr StatusBar_SeparatorStyleKey_get();

  [DllImport(Library.Name)]
  public static extern IntPtr new_StatusBarItem();

  [DllImport(Library.Name)]
  public static extern IntPtr new_TabControl();

  [DllImport(Library.Name)]
  public static extern IntPtr TabControl_ContentTemplateProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TabControl_ContentTemplateSelectorProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TabControl_SelectedContentProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TabControl_SelectedContentTemplateProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TabControl_SelectedContentTemplateSelectorProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TabControl_TabStripPlacementProperty_get();

  [DllImport(Library.Name)]
  public static extern void TabControl_ContentTemplate_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TabControl_ContentTemplate_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TabControl_ContentTemplateSelector_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TabControl_ContentTemplateSelector_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TabControl_SelectedContent_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TabControl_SelectedContentTemplate_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TabControl_SelectedContentTemplateSelector_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TabControl_TabStripPlacement_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TabControl_TabStripPlacement_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_TabItem();

  [DllImport(Library.Name)]
  public static extern IntPtr TabItem_IsSelectedProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TabItem_TabStripPlacementProperty_get();

  [DllImport(Library.Name)]
  public static extern void TabItem_IsSelected_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool TabItem_IsSelected_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int TabItem_TabStripPlacement_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_TabPanel();

  [DllImport(Library.Name)]
  public static extern IntPtr new_RadioButton();

  [DllImport(Library.Name)]
  public static extern IntPtr RadioButton_GroupNameProperty_get();

  [DllImport(Library.Name)]
  public static extern void RadioButton_GroupName_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr RadioButton_GroupName_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_RepeatButton();

  [DllImport(Library.Name)]
  public static extern IntPtr RepeatButton_DelayProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr RepeatButton_IntervalProperty_get();

  [DllImport(Library.Name)]
  public static extern void RepeatButton_Delay_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int RepeatButton_Delay_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RepeatButton_Interval_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int RepeatButton_Interval_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_RoutedCommand__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_RoutedCommand__SWIG_1([MarshalAs(UnmanagedType.LPWStr)]string jarg1, IntPtr jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_RoutedCommand__SWIG_2([MarshalAs(UnmanagedType.LPWStr)]string jarg1, IntPtr jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool RoutedCommand_CanExecute__SWIG_0(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern void RoutedCommand_Execute__SWIG_0(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool RoutedCommand_CanExecute__SWIG_1(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void RoutedCommand_Execute__SWIG_1(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr RoutedCommand_Name_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RoutedCommand_OwnerType_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RoutedCommand_InputGestures_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_RoutedUICommand__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_RoutedUICommand__SWIG_1([MarshalAs(UnmanagedType.LPWStr)]string jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2, IntPtr jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr new_RoutedUICommand__SWIG_2([MarshalAs(UnmanagedType.LPWStr)]string jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2, IntPtr jarg3, HandleRef jarg4);

  [DllImport(Library.Name)]
  public static extern void RoutedUICommand_Text_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr RoutedUICommand_Text_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_TextBlock__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_TextBlock__SWIG_1([MarshalAs(UnmanagedType.LPWStr)]string jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_BackgroundProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_CharacterSpacingProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_FontFamilyProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_FontSizeProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_FontStretchProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_FontStyleProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_FontWeightProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_ForegroundProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_LineHeightProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_LineStackingStrategyProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_PaddingProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_StrokeProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_StrokeThicknessProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_TextAlignmentProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_TextDecorationsProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_TextProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_TextTrimmingProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_TextWrappingProperty_get();

  [DllImport(Library.Name)]
  public static extern void TextBlock_Background_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_Background_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBlock_CharacterSpacing_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextBlock_CharacterSpacing_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBlock_FontFamily_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_FontFamily_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBlock_FontSize_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float TextBlock_FontSize_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBlock_FontStretch_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextBlock_FontStretch_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBlock_FontStyle_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextBlock_FontStyle_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBlock_FontWeight_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextBlock_FontWeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBlock_Foreground_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_Foreground_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_Inlines_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBlock_LineHeight_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float TextBlock_LineHeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBlock_LineStackingStrategy_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextBlock_LineStackingStrategy_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBlock_Padding_set(HandleRef jarg1, ref Thickness jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_Padding_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBlock_Stroke_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_Stroke_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBlock_StrokeThickness_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float TextBlock_StrokeThickness_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBlock_TextAlignment_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextBlock_TextAlignment_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBlock_Text_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_Text_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBlock_TextDecorations_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextBlock_TextDecorations_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBlock_TextTrimming_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextBlock_TextTrimming_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBlock_TextWrapping_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextBlock_TextWrapping_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_FormattedText_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_ToStringHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_TextBox();

  [DllImport(Library.Name)]
  public static extern void TextBox_SelectAll(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBox_Select(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport(Library.Name)]
  public static extern void TextBox_Clear(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int TextBox_GetCharacterIndexFromPoint(HandleRef jarg1, ref Point jarg2, bool jarg3);

  [DllImport(Library.Name)]
  public static extern int TextBox_GetCharacterIndexFromLineIndex(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextBox_GetLineIndexFromCharacterIndex(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextBox_GetLineLength(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextBox_GetFirstVisibleLineIndex(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int TextBox_GetLastVisibleLineIndex(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBox_ScrollToLine(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBox_GetRangeBounds(HandleRef jarg1, uint jarg2, uint jarg3);

  [DllImport(Library.Name)]
  public static extern void TextBox_HideCaret(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBox_MaxLengthProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TextBox_MaxLinesProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TextBox_MinLinesProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TextBox_PlaceholderProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TextBox_TextAlignmentProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TextBox_TextProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TextBox_TextWrappingProperty_get();

  [DllImport(Library.Name)]
  public static extern void TextBox_CaretIndex_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextBox_CaretIndex_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBox_MaxLength_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextBox_MaxLength_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBox_MaxLines_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextBox_MaxLines_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBox_MinLines_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextBox_MinLines_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBox_SelectedText_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBox_SelectedText_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBox_SelectionLength_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextBox_SelectionLength_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBox_SelectionStart_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextBox_SelectionStart_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBox_TextAlignment_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextBox_TextAlignment_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBox_Text_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBox_Text_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBox_TextWrapping_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextBox_TextWrapping_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBox_TextView_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBox_Placeholder_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBox_Placeholder_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool DragCompletedEventArgs_Canceled_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float DragCompletedEventArgs_HorizontalChange_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float DragCompletedEventArgs_VerticalChange_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_DragCompletedEventArgs(HandleRef jarg1, bool jarg2, float jarg3, float jarg4);

  [DllImport(Library.Name)]
  public static extern void delete_DragCompletedEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float DragStartedEventArgs_HorizontalOffset_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float DragStartedEventArgs_VerticalOffset_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_DragStartedEventArgs(HandleRef jarg1, float jarg2, float jarg3);

  [DllImport(Library.Name)]
  public static extern void delete_DragStartedEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float DragDeltaEventArgs_HorizontalChange_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float DragDeltaEventArgs_VerticalChange_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_DragDeltaEventArgs(HandleRef jarg1, float jarg2, float jarg3);

  [DllImport(Library.Name)]
  public static extern void delete_DragDeltaEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Thumb();

  [DllImport(Library.Name)]
  public static extern void Thumb_CancelDrag(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Thumb_IsDraggingProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Thumb_DragCompletedEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Thumb_DragDeltaEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Thumb_DragStartedEvent_get();

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Thumb_IsDragging_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_GridSplitter();

  [DllImport(Library.Name)]
  public static extern IntPtr GridSplitter_DragIncrementProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr GridSplitter_KeyboardIncrementProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr GridSplitter_ResizeDirectionProperty_get();

  [DllImport(Library.Name)]
  public static extern void GridSplitter_ResizeBehaviorProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GridSplitter_ResizeBehaviorProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr GridSplitter_ShowsPreviewProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr GridSplitter_PreviewStyleProperty_get();

  [DllImport(Library.Name)]
  public static extern void GridSplitter_DragIncrement_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float GridSplitter_DragIncrement_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridSplitter_KeyboardIncrement_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float GridSplitter_KeyboardIncrement_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridSplitter_ResizeDirection_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int GridSplitter_ResizeDirection_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridSplitter_ResizeBehavior_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int GridSplitter_ResizeBehavior_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridSplitter_ShowsPreview_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool GridSplitter_ShowsPreview_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridSplitter_PreviewStyle_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridSplitter_PreviewStyle_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_TickBar();

  [DllImport(Library.Name)]
  public static extern IntPtr TickBar_FillProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TickBar_IsDirectionReversedProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TickBar_IsSelectionRangeEnabledProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TickBar_MaximumProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TickBar_MinimumProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TickBar_PlacementProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TickBar_ReservedSpaceProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TickBar_SelectionEndProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TickBar_SelectionStartProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TickBar_TickFrequencyProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TickBar_TicksProperty_get();

  [DllImport(Library.Name)]
  public static extern void TickBar_Fill_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TickBar_Fill_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TickBar_IsDirectionReversed_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool TickBar_IsDirectionReversed_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TickBar_IsSelectionRangeEnabled_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool TickBar_IsSelectionRangeEnabled_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TickBar_Maximum_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float TickBar_Maximum_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TickBar_Minimum_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float TickBar_Minimum_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TickBar_Placement_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TickBar_Placement_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TickBar_ReservedSpace_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float TickBar_ReservedSpace_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TickBar_SelectionEnd_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float TickBar_SelectionEnd_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TickBar_SelectionStart_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float TickBar_SelectionStart_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TickBar_TickFrequency_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float TickBar_TickFrequency_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TickBar_Ticks_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TickBar_Ticks_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ToolBar();

  [DllImport(Library.Name)]
  public static extern int ToolBar_GetOverflowMode(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolBar_SetOverflowMode(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ToolBar_GetIsOverflowItem(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolBar_BandIndexProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ToolBar_BandProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ToolBar_HasOverflowItemsProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ToolBar_IsOverflowItemProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ToolBar_IsOverflowOpenProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ToolBar_OrientationProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ToolBar_OverflowModeProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ToolBar_ButtonStyleKey_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ToolBar_ToggleButtonStyleKey_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ToolBar_CheckBoxStyleKey_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ToolBar_RadioButtonStyleKey_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ToolBar_TextBoxStyleKey_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ToolBar_ComboBoxStyleKey_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ToolBar_SeparatorStyleKey_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ToolBar_MenuStyleKey_get();

  [DllImport(Library.Name)]
  public static extern void ToolBar_Band_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int ToolBar_Band_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolBar_BandIndex_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int ToolBar_BandIndex_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ToolBar_HasOverflowItems_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolBar_IsOverflowOpen_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ToolBar_IsOverflowOpen_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int ToolBar_Orientation_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ToolBarOverflowPanel();

  [DllImport(Library.Name)]
  public static extern IntPtr ToolBarOverflowPanel_WrapWidthProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolBarOverflowPanel_WrapWidth_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float ToolBarOverflowPanel_WrapWidth_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ToolBarPanel();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ToolBarTray();

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ToolBarTray_GetIsLocked(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolBarTray_SetIsLocked(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolBarTray_BackgroundProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ToolBarTray_IsLockedProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ToolBarTray_OrientationProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolBarTray_Background_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolBarTray_Background_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolBarTray_Orientation_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int ToolBarTray_Orientation_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ToolTip();

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTip_GetPopup(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTip_HasDropShadowProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTip_HorizontalOffsetProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTip_IsOpenProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTip_PlacementProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTip_PlacementRectangleProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTip_PlacementTargetProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTip_StaysOpenProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTip_VerticalOffsetProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTip_ClosedEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTip_OpenedEvent_get();

  [DllImport(Library.Name)]
  public static extern void ToolTip_HasDropShadow_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ToolTip_HasDropShadow_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolTip_HorizontalOffset_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float ToolTip_HorizontalOffset_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolTip_IsOpen_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ToolTip_IsOpen_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolTip_Placement_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int ToolTip_Placement_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolTip_PlacementRectangle_set(HandleRef jarg1, ref Rect jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTip_PlacementRectangle_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolTip_PlacementTarget_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTip_PlacementTarget_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolTip_StaysOpen_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ToolTip_StaysOpen_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolTip_VerticalOffset_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float ToolTip_VerticalOffset_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolTipService_BetweenShowDelayProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTipService_BetweenShowDelayProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolTipService_HasDropShadowProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTipService_HasDropShadowProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolTipService_HorizontalOffsetProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTipService_HorizontalOffsetProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolTipService_InitialShowDelayProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTipService_InitialShowDelayProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolTipService_IsEnabledProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTipService_IsEnabledProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolTipService_IsOpenProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTipService_IsOpenProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolTipService_PlacementProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTipService_PlacementProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolTipService_PlacementRectangleProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTipService_PlacementRectangleProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolTipService_PlacementTargetProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTipService_PlacementTargetProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolTipService_ShowDurationProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTipService_ShowDurationProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolTipService_ShowOnDisabledProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTipService_ShowOnDisabledProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolTipService_ToolTipProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTipService_ToolTipProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolTipService_VerticalOffsetProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTipService_VerticalOffsetProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTipService_ToolTipClosingEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTipService_ToolTipOpeningEvent_get();

  [DllImport(Library.Name)]
  public static extern int ToolTipService_GetBetweenShowDelay(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolTipService_SetBetweenShowDelay(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ToolTipService_GetHasDropShadow(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolTipService_SetHasDropShadow(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  public static extern float ToolTipService_GetHorizontalOffset(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolTipService_SetHorizontalOffset(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern int ToolTipService_GetInitialShowDelay(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolTipService_SetInitialShowDelay(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ToolTipService_GetIsEnabled(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolTipService_SetIsEnabled(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ToolTipService_GetIsOpen(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolTipService_SetIsOpen(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  public static extern int ToolTipService_GetPlacement(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolTipService_SetPlacement(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTipService_GetPlacementRectangle(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolTipService_SetPlacementRectangle(HandleRef jarg1, ref Rect jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTipService_GetPlacementTarget(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolTipService_SetPlacementTarget(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern int ToolTipService_GetShowDuration(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolTipService_SetShowDuration(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ToolTipService_GetShowOnDisabled(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolTipService_SetShowOnDisabled(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTipService_GetToolTip(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolTipService_SetToolTip(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern float ToolTipService_GetVerticalOffset(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolTipService_SetVerticalOffset(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Track();

  [DllImport(Library.Name)]
  public static extern float Track_ValueFromDistance(HandleRef jarg1, float jarg2, float jarg3);

  [DllImport(Library.Name)]
  public static extern float Track_ValueFromPoint(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Track_IsDirectionReversedProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Track_MaximumProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Track_MinimumProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Track_OrientationProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Track_ValueProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Track_ViewportSizeProperty_get();

  [DllImport(Library.Name)]
  public static extern void Track_DecreaseRepeatButton_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Track_DecreaseRepeatButton_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Track_IncreaseRepeatButton_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Track_IncreaseRepeatButton_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Track_IsDirectionReversed_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Track_IsDirectionReversed_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Track_Maximum_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Track_Maximum_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Track_Minimum_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Track_Minimum_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Track_Orientation_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Track_Orientation_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Track_Thumb_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Track_Thumb_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Track_Value_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Track_Value_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Track_ViewportSize_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Track_ViewportSize_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_TreeView();

  [DllImport(Library.Name)]
  public static extern IntPtr TreeView_SelectedItemProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TreeView_SelectedItemChangedEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TreeView_SelectedItem_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_TreeViewItem();

  [DllImport(Library.Name)]
  public static extern IntPtr TreeViewItem_IsExpandedProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TreeViewItem_IsSelectedProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TreeViewItem_IsSelectionActiveProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TreeViewItem_CollapsedEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TreeViewItem_ExpandedEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TreeViewItem_SelectedEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TreeViewItem_UnselectedEvent_get();

  [DllImport(Library.Name)]
  public static extern void TreeViewItem_IsExpanded_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool TreeViewItem_IsExpanded_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TreeViewItem_IsSelected_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool TreeViewItem_IsSelected_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool TreeViewItem_IsSelectionActive_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Viewbox();

  [DllImport(Library.Name)]
  public static extern IntPtr Viewbox_GetStretchScale__SWIG_0(ref Size jarg1, ref Size jarg2, int jarg3, int jarg4);

  [DllImport(Library.Name)]
  public static extern IntPtr Viewbox_GetStretchScale__SWIG_1(ref Size jarg1, ref Size jarg2, int jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr Viewbox_StretchDirectionProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Viewbox_StretchProperty_get();

  [DllImport(Library.Name)]
  public static extern void Viewbox_StretchDirection_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Viewbox_StretchDirection_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Viewbox_Stretch_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Viewbox_Stretch_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Viewbox_Child_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Viewbox_Child_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_VisualBrush();

  [DllImport(Library.Name)]
  public static extern IntPtr VisualBrush_VisualProperty_get();

  [DllImport(Library.Name)]
  public static extern void VisualBrush_Visual_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualBrush_Visual_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_WrapPanel();

  [DllImport(Library.Name)]
  public static extern IntPtr WrapPanel_ItemWidthProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr WrapPanel_ItemHeightProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr WrapPanel_OrientationProperty_get();

  [DllImport(Library.Name)]
  public static extern void WrapPanel_ItemWidth_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float WrapPanel_ItemWidth_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void WrapPanel_ItemHeight_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float WrapPanel_ItemHeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void WrapPanel_Orientation_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int WrapPanel_Orientation_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_HandoffBehavior(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_HandoffBehavior(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TimeSpan_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_TimeSpan_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Unbox_TimeSpan(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_TimeSpan(ref TimeSpanStruct jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Duration_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_Duration_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Unbox_Duration(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Duration(ref Duration jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Duration_TryParse([MarshalAs(UnmanagedType.LPWStr)]string jarg1, out Duration jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr KeyTime_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_KeyTime_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Unbox_KeyTime(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_KeyTime(ref KeyTime jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool KeyTime_TryParse([MarshalAs(UnmanagedType.LPWStr)]string jarg1, out KeyTime jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr RepeatBehavior_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_RepeatBehavior_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Unbox_RepeatBehavior(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_RepeatBehavior(ref RepeatBehavior jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool RepeatBehavior_TryParse([MarshalAs(UnmanagedType.LPWStr)]string jarg1, out RepeatBehavior jarg2);

  [DllImport(Library.Name)]
  public static extern int Unbox_ClockState(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_ClockState(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Clock_GetCurrentIteration__SWIG_0(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern double Clock_GetCurrentTime__SWIG_0(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int Clock_CurrentState_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Clock_HasControllableRoot_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Clock_Parent_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Clock_Timeline_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float Clock_GetCurrentProgress(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_AnimationClock(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ClockGroup(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  public static extern void ClockGroup_Add(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ClockGroup_GetChild(HandleRef jarg1, uint jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ClockGroup_Tick(HandleRef jarg1, double jarg2, int jarg3);

  [DllImport(Library.Name)]
  public static extern int ClockGroup_ChildrenCount_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ClockGroup_Timeline_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_FillBehavior(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_FillBehavior(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TimelineEventArgs_Target_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_TimelineEventArgs__SWIG_0(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_TimelineEventArgs__SWIG_1();

  [DllImport(Library.Name)]
  public static extern void delete_TimelineEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int Timeline_GetDesiredFrameRate(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Timeline_SetDesiredFrameRate(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Timeline_AccelerationRatioProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Timeline_AutoReverseProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Timeline_BeginTimeProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Timeline_DecelerationRatioProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Timeline_DesiredFrameRateProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Timeline_DurationProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Timeline_FillBehaviorProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Timeline_NameProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Timeline_RepeatBehaviorProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Timeline_SpeedRatioProperty_get();

  [DllImport(Library.Name)]
  public static extern void Timeline_AccelerationRatio_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Timeline_AccelerationRatio_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Timeline_AutoReverse_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Timeline_AutoReverse_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Timeline_BeginTime_set(HandleRef jarg1, ref NullableTimeSpan jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Timeline_BeginTime_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Timeline_DecelerationRatio_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Timeline_DecelerationRatio_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Timeline_Duration_set(HandleRef jarg1, ref Duration jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Timeline_Duration_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Timeline_FillBehavior_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Timeline_FillBehavior_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Timeline_Name_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Timeline_Name_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Timeline_RepeatBehavior_set(HandleRef jarg1, ref RepeatBehavior jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Timeline_RepeatBehavior_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Timeline_SpeedRatio_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Timeline_SpeedRatio_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_TimelineCollection();

  [DllImport(Library.Name)]
  public static extern IntPtr TimelineGroup_ChildrenProperty_get();

  [DllImport(Library.Name)]
  public static extern void TimelineGroup_Children_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TimelineGroup_Children_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_SlipBehavior(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_SlipBehavior(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ParallelTimeline();

  [DllImport(Library.Name)]
  public static extern IntPtr ParallelTimeline_SlipBehaviorProperty_get();

  [DllImport(Library.Name)]
  public static extern void ParallelTimeline_SlipBehavior_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int ParallelTimeline_SlipBehavior_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Storyboard();

  [DllImport(Library.Name)]
  public static extern IntPtr Storyboard_GetTargetName(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Storyboard_SetTargetName(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Storyboard_GetTargetProperty(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Storyboard_SetTargetProperty(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Storyboard_GetTarget(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Storyboard_SetTarget(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void Storyboard_Begin__SWIG_0(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Storyboard_Begin__SWIG_1(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void Storyboard_Begin__SWIG_2(HandleRef jarg1, HandleRef jarg2, bool jarg3);

  [DllImport(Library.Name)]
  public static extern void Storyboard_Begin__SWIG_3(HandleRef jarg1, HandleRef jarg2, int jarg3);

  [DllImport(Library.Name)]
  public static extern void Storyboard_Begin__SWIG_4(HandleRef jarg1, HandleRef jarg2, int jarg3, bool jarg4);

  [DllImport(Library.Name)]
  public static extern void Storyboard_Begin__SWIG_5(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern void Storyboard_Begin__SWIG_6(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, bool jarg4);

  [DllImport(Library.Name)]
  public static extern void Storyboard_Begin__SWIG_7(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, int jarg4);

  [DllImport(Library.Name)]
  public static extern void Storyboard_Begin__SWIG_8(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, int jarg4, bool jarg5);

  [DllImport(Library.Name)]
  public static extern void Storyboard_Seek__SWIG_0(HandleRef jarg1, ref TimeSpanStruct jarg2);

  [DllImport(Library.Name)]
  public static extern void Storyboard_Seek__SWIG_1(HandleRef jarg1, ref TimeSpanStruct jarg2, int jarg3);

  [DllImport(Library.Name)]
  public static extern void Storyboard_Seek__SWIG_2(HandleRef jarg1, HandleRef jarg2, ref TimeSpanStruct jarg3, int jarg4);

  [DllImport(Library.Name)]
  public static extern void Storyboard_Pause__SWIG_0(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Storyboard_Pause__SWIG_1(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void Storyboard_Resume__SWIG_0(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Storyboard_Resume__SWIG_1(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void Storyboard_Stop__SWIG_0(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Storyboard_Stop__SWIG_1(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void Storyboard_Remove__SWIG_0(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Storyboard_Remove__SWIG_1(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Storyboard_IsPlaying__SWIG_0(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Storyboard_IsPlaying__SWIG_1(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Storyboard_IsPaused__SWIG_0(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Storyboard_IsPaused__SWIG_1(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Storyboard_TargetNameProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Storyboard_TargetProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Storyboard_TargetPropertyProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr AnimationTimeline_IsAdditiveProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr AnimationTimeline_IsCumulativeProperty_get();

  [DllImport(Library.Name)]
  public static extern void AnimationTimeline_IsAdditive_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool AnimationTimeline_IsAdditive_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void AnimationTimeline_IsCumulative_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool AnimationTimeline_IsCumulative_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Int16Animation_ByProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Int16Animation_FromProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Int16Animation_ToProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Int16Animation_EasingFunctionProperty_get();

  [DllImport(Library.Name)]
  public static extern void Int16Animation_From_set(HandleRef jarg1, ref NullableInt16 jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Int16Animation_From_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Int16Animation_To_set(HandleRef jarg1, ref NullableInt16 jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Int16Animation_To_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Int16Animation_By_set(HandleRef jarg1, ref NullableInt16 jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Int16Animation_By_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Int16Animation_EasingFunction_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Int16Animation_EasingFunction_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern short Int16Animation_GetCurrentValueCoreHelper(HandleRef jarg1, short jarg2, short jarg3, HandleRef jarg4);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Int16Animation();

  [DllImport(Library.Name)]
  public static extern IntPtr Int32Animation_ByProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Int32Animation_FromProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Int32Animation_ToProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Int32Animation_EasingFunctionProperty_get();

  [DllImport(Library.Name)]
  public static extern void Int32Animation_From_set(HandleRef jarg1, ref NullableInt32 jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Int32Animation_From_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Int32Animation_To_set(HandleRef jarg1, ref NullableInt32 jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Int32Animation_To_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Int32Animation_By_set(HandleRef jarg1, ref NullableInt32 jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Int32Animation_By_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Int32Animation_EasingFunction_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Int32Animation_EasingFunction_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int Int32Animation_GetCurrentValueCoreHelper(HandleRef jarg1, int jarg2, int jarg3, HandleRef jarg4);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Int32Animation();

  [DllImport(Library.Name)]
  public static extern IntPtr Int64Animation_ByProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Int64Animation_FromProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Int64Animation_ToProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Int64Animation_EasingFunctionProperty_get();

  [DllImport(Library.Name)]
  public static extern void Int64Animation_From_set(HandleRef jarg1, ref NullableInt64 jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Int64Animation_From_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Int64Animation_To_set(HandleRef jarg1, ref NullableInt64 jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Int64Animation_To_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Int64Animation_By_set(HandleRef jarg1, ref NullableInt64 jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Int64Animation_By_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Int64Animation_EasingFunction_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Int64Animation_EasingFunction_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern long Int64Animation_GetCurrentValueCoreHelper(HandleRef jarg1, long jarg2, long jarg3, HandleRef jarg4);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Int64Animation();

  [DllImport(Library.Name)]
  public static extern IntPtr DoubleAnimation_ByProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr DoubleAnimation_FromProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr DoubleAnimation_ToProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr DoubleAnimation_EasingFunctionProperty_get();

  [DllImport(Library.Name)]
  public static extern void DoubleAnimation_From_set(HandleRef jarg1, ref NullableFloat jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr DoubleAnimation_From_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void DoubleAnimation_To_set(HandleRef jarg1, ref NullableFloat jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr DoubleAnimation_To_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void DoubleAnimation_By_set(HandleRef jarg1, ref NullableFloat jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr DoubleAnimation_By_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void DoubleAnimation_EasingFunction_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr DoubleAnimation_EasingFunction_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float DoubleAnimation_GetCurrentValueCoreHelper(HandleRef jarg1, float jarg2, float jarg3, HandleRef jarg4);

  [DllImport(Library.Name)]
  public static extern IntPtr new_DoubleAnimation();

  [DllImport(Library.Name)]
  public static extern IntPtr ColorAnimation_ByProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ColorAnimation_FromProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ColorAnimation_ToProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ColorAnimation_EasingFunctionProperty_get();

  [DllImport(Library.Name)]
  public static extern void ColorAnimation_From_set(HandleRef jarg1, ref NullableColor jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ColorAnimation_From_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ColorAnimation_To_set(HandleRef jarg1, ref NullableColor jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ColorAnimation_To_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ColorAnimation_By_set(HandleRef jarg1, ref NullableColor jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ColorAnimation_By_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ColorAnimation_EasingFunction_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ColorAnimation_EasingFunction_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ColorAnimation_GetCurrentValueCoreHelper(HandleRef jarg1, ref Color jarg2, ref Color jarg3, HandleRef jarg4);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ColorAnimation();

  [DllImport(Library.Name)]
  public static extern IntPtr PointAnimation_ByProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr PointAnimation_FromProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr PointAnimation_ToProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr PointAnimation_EasingFunctionProperty_get();

  [DllImport(Library.Name)]
  public static extern void PointAnimation_From_set(HandleRef jarg1, ref NullablePoint jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr PointAnimation_From_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void PointAnimation_To_set(HandleRef jarg1, ref NullablePoint jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr PointAnimation_To_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void PointAnimation_By_set(HandleRef jarg1, ref NullablePoint jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr PointAnimation_By_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void PointAnimation_EasingFunction_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr PointAnimation_EasingFunction_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PointAnimation_GetCurrentValueCoreHelper(HandleRef jarg1, ref Point jarg2, ref Point jarg3, HandleRef jarg4);

  [DllImport(Library.Name)]
  public static extern IntPtr new_PointAnimation();

  [DllImport(Library.Name)]
  public static extern IntPtr RectAnimation_ByProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr RectAnimation_FromProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr RectAnimation_ToProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr RectAnimation_EasingFunctionProperty_get();

  [DllImport(Library.Name)]
  public static extern void RectAnimation_From_set(HandleRef jarg1, ref NullableRect jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr RectAnimation_From_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RectAnimation_To_set(HandleRef jarg1, ref NullableRect jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr RectAnimation_To_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RectAnimation_By_set(HandleRef jarg1, ref NullableRect jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr RectAnimation_By_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RectAnimation_EasingFunction_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr RectAnimation_EasingFunction_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RectAnimation_GetCurrentValueCoreHelper(HandleRef jarg1, ref Rect jarg2, ref Rect jarg3, HandleRef jarg4);

  [DllImport(Library.Name)]
  public static extern IntPtr new_RectAnimation();

  [DllImport(Library.Name)]
  public static extern IntPtr SizeAnimation_ByProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr SizeAnimation_FromProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr SizeAnimation_ToProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr SizeAnimation_EasingFunctionProperty_get();

  [DllImport(Library.Name)]
  public static extern void SizeAnimation_From_set(HandleRef jarg1, ref NullableSize jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr SizeAnimation_From_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void SizeAnimation_To_set(HandleRef jarg1, ref NullableSize jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr SizeAnimation_To_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void SizeAnimation_By_set(HandleRef jarg1, ref NullableSize jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr SizeAnimation_By_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void SizeAnimation_EasingFunction_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr SizeAnimation_EasingFunction_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr SizeAnimation_GetCurrentValueCoreHelper(HandleRef jarg1, ref Size jarg2, ref Size jarg3, HandleRef jarg4);

  [DllImport(Library.Name)]
  public static extern IntPtr new_SizeAnimation();

  [DllImport(Library.Name)]
  public static extern IntPtr ThicknessAnimation_ByProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ThicknessAnimation_FromProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ThicknessAnimation_ToProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ThicknessAnimation_EasingFunctionProperty_get();

  [DllImport(Library.Name)]
  public static extern void ThicknessAnimation_From_set(HandleRef jarg1, ref NullableThickness jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ThicknessAnimation_From_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ThicknessAnimation_To_set(HandleRef jarg1, ref NullableThickness jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ThicknessAnimation_To_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ThicknessAnimation_By_set(HandleRef jarg1, ref NullableThickness jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ThicknessAnimation_By_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ThicknessAnimation_EasingFunction_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ThicknessAnimation_EasingFunction_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ThicknessAnimation_GetCurrentValueCoreHelper(HandleRef jarg1, ref Thickness jarg2, ref Thickness jarg3, HandleRef jarg4);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ThicknessAnimation();

  [DllImport(Library.Name)]
  public static extern IntPtr new_KeySpline__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_KeySpline__SWIG_1(ref Point jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_KeySpline__SWIG_2(float jarg1, float jarg2, float jarg3, float jarg4);

  [DllImport(Library.Name)]
  public static extern float KeySpline_GetSplineProgress(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern void KeySpline_ControlPoint1_set(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr KeySpline_ControlPoint1_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void KeySpline_ControlPoint2_set(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr KeySpline_ControlPoint2_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr KeyFrame_KeyTimeProperty();

  [DllImport(Library.Name)]
  public static extern IntPtr BooleanKeyFrame_ValueProperty_get();

  [DllImport(Library.Name)]
  public static extern void BooleanKeyFrame_KeyTime_set(HandleRef jarg1, ref KeyTime jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr BooleanKeyFrame_KeyTime_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void BooleanKeyFrame_Value_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool BooleanKeyFrame_Value_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_BooleanKeyFrameCollection();

  [DllImport(Library.Name)]
  public static extern IntPtr Int16KeyFrame_ValueProperty_get();

  [DllImport(Library.Name)]
  public static extern void Int16KeyFrame_KeyTime_set(HandleRef jarg1, ref KeyTime jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Int16KeyFrame_KeyTime_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Int16KeyFrame_Value_set(HandleRef jarg1, short jarg2);

  [DllImport(Library.Name)]
  public static extern short Int16KeyFrame_Value_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Int16KeyFrameCollection();

  [DllImport(Library.Name)]
  public static extern IntPtr Int32KeyFrame_ValueProperty_get();

  [DllImport(Library.Name)]
  public static extern void Int32KeyFrame_KeyTime_set(HandleRef jarg1, ref KeyTime jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Int32KeyFrame_KeyTime_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Int32KeyFrame_Value_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Int32KeyFrame_Value_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Int32KeyFrameCollection();

  [DllImport(Library.Name)]
  public static extern IntPtr Int64KeyFrame_ValueProperty_get();

  [DllImport(Library.Name)]
  public static extern void Int64KeyFrame_KeyTime_set(HandleRef jarg1, ref KeyTime jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Int64KeyFrame_KeyTime_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Int64KeyFrame_Value_set(HandleRef jarg1, long jarg2);

  [DllImport(Library.Name)]
  public static extern long Int64KeyFrame_Value_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Int64KeyFrameCollection();

  [DllImport(Library.Name)]
  public static extern IntPtr DoubleKeyFrame_ValueProperty_get();

  [DllImport(Library.Name)]
  public static extern void DoubleKeyFrame_KeyTime_set(HandleRef jarg1, ref KeyTime jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr DoubleKeyFrame_KeyTime_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void DoubleKeyFrame_Value_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float DoubleKeyFrame_Value_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_DoubleKeyFrameCollection();

  [DllImport(Library.Name)]
  public static extern IntPtr ColorKeyFrame_ValueProperty_get();

  [DllImport(Library.Name)]
  public static extern void ColorKeyFrame_KeyTime_set(HandleRef jarg1, ref KeyTime jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ColorKeyFrame_KeyTime_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ColorKeyFrame_Value_set(HandleRef jarg1, ref Color jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ColorKeyFrame_Value_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ColorKeyFrameCollection();

  [DllImport(Library.Name)]
  public static extern IntPtr PointKeyFrame_ValueProperty_get();

  [DllImport(Library.Name)]
  public static extern void PointKeyFrame_KeyTime_set(HandleRef jarg1, ref KeyTime jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr PointKeyFrame_KeyTime_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void PointKeyFrame_Value_set(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr PointKeyFrame_Value_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_PointKeyFrameCollection();

  [DllImport(Library.Name)]
  public static extern IntPtr RectKeyFrame_ValueProperty_get();

  [DllImport(Library.Name)]
  public static extern void RectKeyFrame_KeyTime_set(HandleRef jarg1, ref KeyTime jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr RectKeyFrame_KeyTime_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RectKeyFrame_Value_set(HandleRef jarg1, ref Rect jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr RectKeyFrame_Value_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_RectKeyFrameCollection();

  [DllImport(Library.Name)]
  public static extern IntPtr SizeKeyFrame_ValueProperty_get();

  [DllImport(Library.Name)]
  public static extern void SizeKeyFrame_KeyTime_set(HandleRef jarg1, ref KeyTime jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr SizeKeyFrame_KeyTime_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void SizeKeyFrame_Value_set(HandleRef jarg1, ref Size jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr SizeKeyFrame_Value_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_SizeKeyFrameCollection();

  [DllImport(Library.Name)]
  public static extern IntPtr ThicknessKeyFrame_ValueProperty_get();

  [DllImport(Library.Name)]
  public static extern void ThicknessKeyFrame_KeyTime_set(HandleRef jarg1, ref KeyTime jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ThicknessKeyFrame_KeyTime_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ThicknessKeyFrame_Value_set(HandleRef jarg1, ref Thickness jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ThicknessKeyFrame_Value_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ThicknessKeyFrameCollection();

  [DllImport(Library.Name)]
  public static extern IntPtr ObjectKeyFrame_ValueProperty_get();

  [DllImport(Library.Name)]
  public static extern void ObjectKeyFrame_KeyTime_set(HandleRef jarg1, ref KeyTime jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ObjectKeyFrame_KeyTime_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ObjectKeyFrame_Value_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ObjectKeyFrame_Value_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ObjectKeyFrameCollection();

  [DllImport(Library.Name)]
  public static extern IntPtr StringKeyFrame_ValueProperty_get();

  [DllImport(Library.Name)]
  public static extern void StringKeyFrame_KeyTime_set(HandleRef jarg1, ref KeyTime jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr StringKeyFrame_KeyTime_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void StringKeyFrame_Value_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr StringKeyFrame_Value_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_StringKeyFrameCollection();

  [DllImport(Library.Name)]
  public static extern IntPtr MatrixKeyFrame_ValueProperty_get();

  [DllImport(Library.Name)]
  public static extern void MatrixKeyFrame_KeyTime_set(HandleRef jarg1, ref KeyTime jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr MatrixKeyFrame_KeyTime_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void MatrixKeyFrame_Value_set(HandleRef jarg1, ref Matrix jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr MatrixKeyFrame_Value_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_MatrixKeyFrameCollection();

  [DllImport(Library.Name)]
  public static extern IntPtr new_DiscreteBooleanKeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr new_DiscreteInt16KeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr new_DiscreteInt32KeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr new_DiscreteInt64KeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr new_DiscreteDoubleKeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr new_DiscreteColorKeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr new_DiscretePointKeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr new_DiscreteRectKeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr new_DiscreteSizeKeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr new_DiscreteThicknessKeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr new_DiscreteObjectKeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr new_DiscreteStringKeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr new_DiscreteMatrixKeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr new_LinearInt16KeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr new_LinearInt32KeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr new_LinearInt64KeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr new_LinearDoubleKeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr new_LinearColorKeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr new_LinearPointKeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr new_LinearRectKeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr new_LinearSizeKeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr new_LinearThicknessKeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr SplineInt16KeyFrame_KeySplineProperty_get();

  [DllImport(Library.Name)]
  public static extern void SplineInt16KeyFrame_KeySpline_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr SplineInt16KeyFrame_KeySpline_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_SplineInt16KeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr SplineInt32KeyFrame_KeySplineProperty_get();

  [DllImport(Library.Name)]
  public static extern void SplineInt32KeyFrame_KeySpline_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr SplineInt32KeyFrame_KeySpline_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_SplineInt32KeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr SplineInt64KeyFrame_KeySplineProperty_get();

  [DllImport(Library.Name)]
  public static extern void SplineInt64KeyFrame_KeySpline_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr SplineInt64KeyFrame_KeySpline_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_SplineInt64KeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr SplineDoubleKeyFrame_KeySplineProperty_get();

  [DllImport(Library.Name)]
  public static extern void SplineDoubleKeyFrame_KeySpline_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr SplineDoubleKeyFrame_KeySpline_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_SplineDoubleKeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr SplineColorKeyFrame_KeySplineProperty_get();

  [DllImport(Library.Name)]
  public static extern void SplineColorKeyFrame_KeySpline_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr SplineColorKeyFrame_KeySpline_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_SplineColorKeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr SplinePointKeyFrame_KeySplineProperty_get();

  [DllImport(Library.Name)]
  public static extern void SplinePointKeyFrame_KeySpline_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr SplinePointKeyFrame_KeySpline_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_SplinePointKeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr SplineRectKeyFrame_KeySplineProperty_get();

  [DllImport(Library.Name)]
  public static extern void SplineRectKeyFrame_KeySpline_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr SplineRectKeyFrame_KeySpline_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_SplineRectKeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr SplineSizeKeyFrame_KeySplineProperty_get();

  [DllImport(Library.Name)]
  public static extern void SplineSizeKeyFrame_KeySpline_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr SplineSizeKeyFrame_KeySpline_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_SplineSizeKeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr SplineThicknessKeyFrame_KeySplineProperty_get();

  [DllImport(Library.Name)]
  public static extern void SplineThicknessKeyFrame_KeySpline_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr SplineThicknessKeyFrame_KeySpline_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_SplineThicknessKeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr EasingInt16KeyFrame_EasingFunctionProperty_get();

  [DllImport(Library.Name)]
  public static extern void EasingInt16KeyFrame_EasingFunction_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr EasingInt16KeyFrame_EasingFunction_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_EasingInt16KeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr EasingInt32KeyFrame_EasingFunctionProperty_get();

  [DllImport(Library.Name)]
  public static extern void EasingInt32KeyFrame_EasingFunction_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr EasingInt32KeyFrame_EasingFunction_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_EasingInt32KeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr EasingInt64KeyFrame_EasingFunctionProperty_get();

  [DllImport(Library.Name)]
  public static extern void EasingInt64KeyFrame_EasingFunction_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr EasingInt64KeyFrame_EasingFunction_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_EasingInt64KeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr EasingDoubleKeyFrame_EasingFunctionProperty_get();

  [DllImport(Library.Name)]
  public static extern void EasingDoubleKeyFrame_EasingFunction_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr EasingDoubleKeyFrame_EasingFunction_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_EasingDoubleKeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr EasingColorKeyFrame_EasingFunctionProperty_get();

  [DllImport(Library.Name)]
  public static extern void EasingColorKeyFrame_EasingFunction_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr EasingColorKeyFrame_EasingFunction_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_EasingColorKeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr EasingPointKeyFrame_EasingFunctionProperty_get();

  [DllImport(Library.Name)]
  public static extern void EasingPointKeyFrame_EasingFunction_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr EasingPointKeyFrame_EasingFunction_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_EasingPointKeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr EasingRectKeyFrame_EasingFunctionProperty_get();

  [DllImport(Library.Name)]
  public static extern void EasingRectKeyFrame_EasingFunction_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr EasingRectKeyFrame_EasingFunction_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_EasingRectKeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr EasingSizeKeyFrame_EasingFunctionProperty_get();

  [DllImport(Library.Name)]
  public static extern void EasingSizeKeyFrame_EasingFunction_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr EasingSizeKeyFrame_EasingFunction_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_EasingSizeKeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr EasingThicknessKeyFrame_EasingFunctionProperty_get();

  [DllImport(Library.Name)]
  public static extern void EasingThicknessKeyFrame_EasingFunction_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr EasingThicknessKeyFrame_EasingFunction_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_EasingThicknessKeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr new_BooleanAnimationUsingKeyFrames();

  [DllImport(Library.Name)]
  public static extern IntPtr BooleanAnimationUsingKeyFrames_KeyFrames_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool BooleanAnimationUsingKeyFrames_GetCurrentValueCoreHelper(HandleRef jarg1, bool jarg2, bool jarg3, HandleRef jarg4);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Int16AnimationUsingKeyFrames();

  [DllImport(Library.Name)]
  public static extern IntPtr Int16AnimationUsingKeyFrames_KeyFrames_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern short Int16AnimationUsingKeyFrames_GetCurrentValueCoreHelper(HandleRef jarg1, short jarg2, short jarg3, HandleRef jarg4);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Int32AnimationUsingKeyFrames();

  [DllImport(Library.Name)]
  public static extern IntPtr Int32AnimationUsingKeyFrames_KeyFrames_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int Int32AnimationUsingKeyFrames_GetCurrentValueCoreHelper(HandleRef jarg1, int jarg2, int jarg3, HandleRef jarg4);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Int64AnimationUsingKeyFrames();

  [DllImport(Library.Name)]
  public static extern IntPtr Int64AnimationUsingKeyFrames_KeyFrames_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern long Int64AnimationUsingKeyFrames_GetCurrentValueCoreHelper(HandleRef jarg1, long jarg2, long jarg3, HandleRef jarg4);

  [DllImport(Library.Name)]
  public static extern IntPtr new_DoubleAnimationUsingKeyFrames();

  [DllImport(Library.Name)]
  public static extern IntPtr DoubleAnimationUsingKeyFrames_KeyFrames_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float DoubleAnimationUsingKeyFrames_GetCurrentValueCoreHelper(HandleRef jarg1, float jarg2, float jarg3, HandleRef jarg4);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ColorAnimationUsingKeyFrames();

  [DllImport(Library.Name)]
  public static extern IntPtr ColorAnimationUsingKeyFrames_KeyFrames_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ColorAnimationUsingKeyFrames_GetCurrentValueCoreHelper(HandleRef jarg1, ref Color jarg2, ref Color jarg3, HandleRef jarg4);

  [DllImport(Library.Name)]
  public static extern IntPtr new_PointAnimationUsingKeyFrames();

  [DllImport(Library.Name)]
  public static extern IntPtr PointAnimationUsingKeyFrames_KeyFrames_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PointAnimationUsingKeyFrames_GetCurrentValueCoreHelper(HandleRef jarg1, ref Point jarg2, ref Point jarg3, HandleRef jarg4);

  [DllImport(Library.Name)]
  public static extern IntPtr new_RectAnimationUsingKeyFrames();

  [DllImport(Library.Name)]
  public static extern IntPtr RectAnimationUsingKeyFrames_KeyFrames_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RectAnimationUsingKeyFrames_GetCurrentValueCoreHelper(HandleRef jarg1, ref Rect jarg2, ref Rect jarg3, HandleRef jarg4);

  [DllImport(Library.Name)]
  public static extern IntPtr new_SizeAnimationUsingKeyFrames();

  [DllImport(Library.Name)]
  public static extern IntPtr SizeAnimationUsingKeyFrames_KeyFrames_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr SizeAnimationUsingKeyFrames_GetCurrentValueCoreHelper(HandleRef jarg1, ref Size jarg2, ref Size jarg3, HandleRef jarg4);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ThicknessAnimationUsingKeyFrames();

  [DllImport(Library.Name)]
  public static extern IntPtr ThicknessAnimationUsingKeyFrames_KeyFrames_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ThicknessAnimationUsingKeyFrames_GetCurrentValueCoreHelper(HandleRef jarg1, ref Thickness jarg2, ref Thickness jarg3, HandleRef jarg4);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ObjectAnimationUsingKeyFrames();

  [DllImport(Library.Name)]
  public static extern IntPtr ObjectAnimationUsingKeyFrames_KeyFrames_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ObjectAnimationUsingKeyFrames_GetCurrentValueCoreHelper(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4);

  [DllImport(Library.Name)]
  public static extern IntPtr new_StringAnimationUsingKeyFrames();

  [DllImport(Library.Name)]
  public static extern IntPtr StringAnimationUsingKeyFrames_KeyFrames_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr StringAnimationUsingKeyFrames_GetCurrentValueCoreHelper(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2, [MarshalAs(UnmanagedType.LPWStr)]string jarg3, HandleRef jarg4);

  [DllImport(Library.Name)]
  public static extern IntPtr new_MatrixAnimationUsingKeyFrames();

  [DllImport(Library.Name)]
  public static extern IntPtr MatrixAnimationUsingKeyFrames_KeyFrames_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr MatrixAnimationUsingKeyFrames_GetCurrentValueCoreHelper(HandleRef jarg1, ref Matrix jarg2, ref Matrix jarg3, HandleRef jarg4);

  [DllImport(Library.Name)]
  public static extern int Unbox_EasingMode(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_EasingMode(int jarg1);

  [DllImport(Library.Name)]
  public static extern float EasingFunctionBase_Ease(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr EasingFunctionBase_EasingModeProperty_get();

  [DllImport(Library.Name)]
  public static extern void EasingFunctionBase_EasingMode_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int EasingFunctionBase_EasingMode_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_BackEase();

  [DllImport(Library.Name)]
  public static extern IntPtr BackEase_AmplitudeProperty_get();

  [DllImport(Library.Name)]
  public static extern void BackEase_Amplitude_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float BackEase_Amplitude_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_BounceEase();

  [DllImport(Library.Name)]
  public static extern IntPtr BounceEase_BouncesProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr BounceEase_BouncinessProperty_get();

  [DllImport(Library.Name)]
  public static extern void BounceEase_Bounces_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int BounceEase_Bounces_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void BounceEase_Bounciness_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float BounceEase_Bounciness_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_CircleEase();

  [DllImport(Library.Name)]
  public static extern IntPtr new_QuadraticEase();

  [DllImport(Library.Name)]
  public static extern IntPtr new_CubicEase();

  [DllImport(Library.Name)]
  public static extern IntPtr new_QuarticEase();

  [DllImport(Library.Name)]
  public static extern IntPtr new_QuinticEase();

  [DllImport(Library.Name)]
  public static extern IntPtr new_SineEase();

  [DllImport(Library.Name)]
  public static extern IntPtr new_PowerEase();

  [DllImport(Library.Name)]
  public static extern IntPtr PowerEase_PowerProperty_get();

  [DllImport(Library.Name)]
  public static extern void PowerEase_Power_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float PowerEase_Power_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ExponentialEase();

  [DllImport(Library.Name)]
  public static extern IntPtr ExponentialEase_ExponentProperty_get();

  [DllImport(Library.Name)]
  public static extern void ExponentialEase_Exponent_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float ExponentialEase_Exponent_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ElasticEase();

  [DllImport(Library.Name)]
  public static extern IntPtr ElasticEase_OscillationsProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ElasticEase_SpringinessProperty_get();

  [DllImport(Library.Name)]
  public static extern void ElasticEase_Oscillations_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int ElasticEase_Oscillations_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ElasticEase_Springiness_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float ElasticEase_Springiness_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ControllableStoryboardAction_BeginStoryboardName_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ControllableStoryboardAction_BeginStoryboardName_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_BeginStoryboard();

  [DllImport(Library.Name)]
  public static extern IntPtr BeginStoryboard_StoryboardProperty_get();

  [DllImport(Library.Name)]
  public static extern void BeginStoryboard_HandoffBehavior_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int BeginStoryboard_HandoffBehavior_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void BeginStoryboard_Name_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr BeginStoryboard_Name_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void BeginStoryboard_Storyboard_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr BeginStoryboard_Storyboard_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_PauseStoryboard();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ResumeStoryboard();

  [DllImport(Library.Name)]
  public static extern IntPtr new_StopStoryboard();

  [DllImport(Library.Name)]
  public static extern IntPtr new_VisualState();

  [DllImport(Library.Name)]
  public static extern void VisualState_Name_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualState_Name_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VisualState_Storyboard_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualState_Storyboard_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_VisualStateCollection();

  [DllImport(Library.Name)]
  public static extern IntPtr VisualStateChangedEventArgs_OldState_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualStateChangedEventArgs_NewState_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualStateChangedEventArgs_Control_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualStateChangedEventArgs_StateGroupsRoot_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void delete_VisualStateChangedEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_VisualStateGroup();

  [DllImport(Library.Name)]
  public static extern IntPtr VisualStateGroup_GetCurrentState(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void VisualStateGroup_SetCurrentState(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualStateGroup_FindState(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualStateGroup_FindTransition(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern void VisualStateGroup_UpdateAnimations__SWIG_0(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4);

  [DllImport(Library.Name)]
  public static extern void VisualStateGroup_UpdateAnimations__SWIG_1(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualStateGroup_Name_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualStateGroup_States_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualStateGroup_Transitions_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_VisualStateGroupCollection();

  [DllImport(Library.Name)]
  public static extern IntPtr new_VisualTransition();

  [DllImport(Library.Name)]
  public static extern void VisualTransition_From_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualTransition_From_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VisualTransition_To_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualTransition_To_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VisualTransition_GeneratedDuration_set(HandleRef jarg1, ref Duration jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualTransition_GeneratedDuration_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VisualTransition_GeneratedEasingFunction_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualTransition_GeneratedEasingFunction_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VisualTransition_Storyboard_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualTransition_Storyboard_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_VisualTransitionCollection();

  [DllImport(Library.Name)]
  public static extern IntPtr new_VisualStateManager();

  [DllImport(Library.Name)]
  public static extern IntPtr VisualStateManager_GetCustomVisualStateManager(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VisualStateManager_SetCustomVisualStateManager(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualStateManager_GetVisualStateGroups(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VisualStateManager_SetVisualStateGroups(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool VisualStateManager_GoToState(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2, bool jarg3);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool VisualStateManager_GoToElementState(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2, bool jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualStateManager_CustomVisualStateManagerProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr VisualStateManager_VisualStateGroupsProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr new_GridViewColumn();

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewColumn_CellTemplateProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewColumn_CellTemplateSelectorProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewColumn_HeaderProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewColumn_HeaderContainerStyleProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewColumn_HeaderStringFormatProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewColumn_HeaderTemplateProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewColumn_HeaderTemplateSelectorProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewColumn_WidthProperty_get();

  [DllImport(Library.Name)]
  public static extern void GridViewColumn_ActualWidth_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float GridViewColumn_ActualWidth_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridViewColumn_CellTemplate_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewColumn_CellTemplate_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridViewColumn_CellTemplateSelector_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewColumn_CellTemplateSelector_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridViewColumn_DisplayMemberBinding_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewColumn_DisplayMemberBinding_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridViewColumn_Header_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewColumn_Header_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridViewColumn_HeaderContainerStyle_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewColumn_HeaderContainerStyle_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridViewColumn_HeaderStringFormat_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewColumn_HeaderStringFormat_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridViewColumn_HeaderTemplate_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewColumn_HeaderTemplate_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridViewColumn_HeaderTemplateSelector_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewColumn_HeaderTemplateSelector_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridViewColumn_Width_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float GridViewColumn_Width_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_GridViewColumnCollection();

  [DllImport(Library.Name)]
  public static extern int Unbox_GridViewColumnHeaderRole(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_GridViewColumnHeaderRole(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_GridViewColumnHeader();

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewColumnHeader_RoleProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewColumnHeader_Column_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int GridViewColumnHeader_Role_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ViewBase_ClearItem(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void ViewBase_PrepareItem(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_GridView();

  [DllImport(Library.Name)]
  public static extern IntPtr GridView_GetColumnCollection(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridView_SetColumnCollection(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridView_AllowsColumnReorderProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr GridView_ColumnHeaderContainerStyleProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr GridView_ColumnHeaderContextMenuProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr GridView_ColumnHeaderStringFormatProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr GridView_ColumnHeaderTemplateProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr GridView_ColumnHeaderTemplateSelectorProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr GridView_ColumnHeaderToolTipProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr GridView_ColumnCollectionProperty_get();

  [DllImport(Library.Name)]
  public static extern void GridView_AllowsColumnReorder_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool GridView_AllowsColumnReorder_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridView_ColumnHeaderContainerStyle_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridView_ColumnHeaderContainerStyle_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridView_ColumnHeaderContextMenu_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridView_ColumnHeaderContextMenu_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridView_ColumnHeaderStringFormat_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridView_ColumnHeaderStringFormat_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridView_ColumnHeaderTemplate_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridView_ColumnHeaderTemplate_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridView_ColumnHeaderTemplateSelector_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridView_ColumnHeaderTemplateSelector_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridView_ColumnHeaderToolTip_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridView_ColumnHeaderToolTip_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GridView_Columns_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_GridViewRowPresenterBase();

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewRowPresenterBase_ColumnsProperty_get();

  [DllImport(Library.Name)]
  public static extern void GridViewRowPresenterBase_Columns_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewRowPresenterBase_Columns_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_GridViewRowPresenter();

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewRowPresenter_ContentProperty_get();

  [DllImport(Library.Name)]
  public static extern void GridViewRowPresenter_Content_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewRowPresenter_Content_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_GridViewHeaderRowPresenter();

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewHeaderRowPresenter_AllowsColumnReorderProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewHeaderRowPresenter_ColumnHeaderContainerStyleProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewHeaderRowPresenter_ColumnHeaderContextMenuProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewHeaderRowPresenter_ColumnHeaderStringFormatProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewHeaderRowPresenter_ColumnHeaderTemplateProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewHeaderRowPresenter_ColumnHeaderTemplateSelectorProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewHeaderRowPresenter_ColumnHeaderToolTipProperty_get();

  [DllImport(Library.Name)]
  public static extern void GridViewHeaderRowPresenter_AllowsColumnReorder_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool GridViewHeaderRowPresenter_AllowsColumnReorder_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridViewHeaderRowPresenter_ColumnHeaderContainerStyle_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewHeaderRowPresenter_ColumnHeaderContainerStyle_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridViewHeaderRowPresenter_ColumnHeaderContextMenu_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewHeaderRowPresenter_ColumnHeaderContextMenu_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridViewHeaderRowPresenter_ColumnHeaderStringFormat_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewHeaderRowPresenter_ColumnHeaderStringFormat_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridViewHeaderRowPresenter_ColumnHeaderTemplate_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewHeaderRowPresenter_ColumnHeaderTemplate_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridViewHeaderRowPresenter_ColumnHeaderTemplateSelector_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewHeaderRowPresenter_ColumnHeaderTemplateSelector_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridViewHeaderRowPresenter_ColumnHeaderToolTip_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewHeaderRowPresenter_ColumnHeaderToolTip_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ListView();

  [DllImport(Library.Name)]
  public static extern IntPtr ListView_ViewProperty_get();

  [DllImport(Library.Name)]
  public static extern void ListView_View_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ListView_View_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ListViewItem();

  [DllImport(Library.Name)]
  public static extern IntPtr new_RiveInput();

  [DllImport(Library.Name)]
  public static extern IntPtr RiveInput_InputNameProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr RiveInput_InputValueProperty_get();

  [DllImport(Library.Name)]
  public static extern void RiveInput_InputName_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr RiveInput_InputName_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RiveInput_InputValue_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr RiveInput_InputValue_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_RiveInputCollection();

  [DllImport(Library.Name)]
  public static extern IntPtr new_RiveRun();

  [DllImport(Library.Name)]
  public static extern IntPtr RiveRun_RunNameProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr RiveRun_RunTextProperty_get();

  [DllImport(Library.Name)]
  public static extern void RiveRun_RunName_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr RiveRun_RunName_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RiveRun_RunText_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr RiveRun_RunText_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_RiveRunCollection();

  [DllImport(Library.Name)]
  public static extern IntPtr new_RiveControl();

  [DllImport(Library.Name)]
  public static extern void RiveControl_SetInputValue(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern void RiveControl_FireInputTrigger(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern uint RiveControl_GetSourceInputCount(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RiveControl_GetSourceInput(HandleRef jarg1, uint jarg2, out RiveSourceInputType jarg3);

  [DllImport(Library.Name)]
  public static extern void RiveControl_SetRunText(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2, [MarshalAs(UnmanagedType.LPWStr)]string jarg3);

  [DllImport(Library.Name)]
  public static extern uint RiveControl_GetSourceRunCount(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RiveControl_GetSourceRunName(HandleRef jarg1, uint jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr RiveControl_SourceProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr RiveControl_StateProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr RiveControl_StretchProperty_get();

  [DllImport(Library.Name)]
  public static extern void RiveControl_Source_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr RiveControl_Source_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RiveControl_State_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RiveControl_Stretch_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int RiveControl_Stretch_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RiveControl_Inputs_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RiveControl_Runs_get(HandleRef jarg1);
}

}

