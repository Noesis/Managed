//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public partial class DependencyObject : DispatcherObject {
  internal new static DependencyObject CreateProxy(IntPtr cPtr, bool cMemoryOwn) {
    return new DependencyObject(cPtr, cMemoryOwn);
  }

  internal DependencyObject(IntPtr cPtr, bool cMemoryOwn) : base(cPtr, cMemoryOwn) {
  }

  internal static HandleRef getCPtr(DependencyObject obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  protected DependencyObject() {
  }

  public void SetCurrentValue(DependencyProperty dp, object value) {
    if (dp == null) {
      throw new ArgumentNullException("dp");
    }
    SetCurrentValueHelper(dp, value);
  }

  public object ReadLocalValue(DependencyProperty dp) {
    if (dp == null) {
      throw new ArgumentNullException("dp");
    }
    IntPtr cPtr = ReadLocalValueHelper(dp);
    return Noesis.Extend.GetProxy(cPtr, true);
  }

  public void CoerceValue(DependencyProperty dp) {
    if (dp == null) {
      throw new ArgumentNullException("dp");
    }
    CoerceValueHelper(dp);
  }

  public void InvalidateProperty(DependencyProperty dp) {
    if (dp == null) {
      throw new ArgumentNullException("dp");
    }
    InvalidatePropertyHelper(dp);
  }

  public void ClearValue(DependencyProperty dp) {
    if (dp == null) {
      throw new ArgumentNullException("dp");
    }
    ClearValueHelper(dp);
  }

  protected void ClearAnimation(DependencyProperty dp) {
    NoesisGUI_PINVOKE.DependencyObject_ClearAnimation(swigCPtr, DependencyProperty.getCPtr(dp));
  }

  public bool IsSealed {
    get {
      bool ret = NoesisGUI_PINVOKE.DependencyObject_IsSealed_get(swigCPtr);
      return ret;
    } 
  }

  private void SetCurrentValueHelper(DependencyProperty dp, object value) {
    NoesisGUI_PINVOKE.DependencyObject_SetCurrentValueHelper(swigCPtr, DependencyProperty.getCPtr(dp), Noesis.Extend.GetInstanceHandle(value));
  }

  private IntPtr ReadLocalValueHelper(DependencyProperty dp) {
    IntPtr ret = NoesisGUI_PINVOKE.DependencyObject_ReadLocalValueHelper(swigCPtr, DependencyProperty.getCPtr(dp));
    return ret;
  }

  private void CoerceValueHelper(DependencyProperty dp) {
    NoesisGUI_PINVOKE.DependencyObject_CoerceValueHelper(swigCPtr, DependencyProperty.getCPtr(dp));
  }

  private void InvalidatePropertyHelper(DependencyProperty dp) {
    NoesisGUI_PINVOKE.DependencyObject_InvalidatePropertyHelper(swigCPtr, DependencyProperty.getCPtr(dp));
  }

  private void ClearValueHelper(DependencyProperty dp) {
    NoesisGUI_PINVOKE.DependencyObject_ClearValueHelper(swigCPtr, DependencyProperty.getCPtr(dp));
  }

  protected internal void InitObject() {
    NoesisGUI_PINVOKE.DependencyObject_InitObject(swigCPtr);
  }

  internal new static IntPtr Extend(string typeName) {
    return NoesisGUI_PINVOKE.Extend_DependencyObject(Marshal.StringToHGlobalAnsi(typeName));
  }
}

}

